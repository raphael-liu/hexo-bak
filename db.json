{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.css","path":"main.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.svg","path":"fonts/tooltip.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.js","path":"slider.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1482736906000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1482736906000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1482736906000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1482736906000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1482736906000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1482736906000},{"_id":"themes/yilia/README.md","hash":"6288a9a9809f1d14d3517660dc7fda03f7c4d4cc","modified":1482736906000},{"_id":"themes/yilia/_config.yml","hash":"1062cba2621adb354fe6e7f1c70f01a1f56d93e8","modified":1482741477000},{"_id":"themes/yilia/package.json","hash":"d8f527c02fb9ad0605b057dff8031c5f55722d25","modified":1482736906000},{"_id":"themes/yilia/webpack.config.js","hash":"fef3470cf72f5c00035fcad54799070f5c2db713","modified":1482736906000},{"_id":"source/_posts/Dive into React Native performance.md","hash":"b385dc37a6135245e20b9a93000dd6555c1e6a3b","modified":1477451032000},{"_id":"source/_posts/React-Native-for-Android-with-multi-RNApp.md","hash":"bb173159ae76fa833595d9c729b3160169b4e150","modified":1480920547000},{"_id":"source/_posts/react-native-android-ui-performance.md","hash":"9064ce4b016f270e3f18bcd64cb4a0fe020719bb","modified":1477466176000},{"_id":"source/_posts/react-native-performance.md","hash":"9b01354c3b72822528f5e4adaddef08d53c31b7b","modified":1477464945000},{"_id":"source/blogs/index.md","hash":"c80b45138051fd8f2d15bcc95945b7936f123f6b","modified":1472635794000},{"_id":"source/comments/index.md","hash":"c3058eaf24918bfcb1dc972ac41276dffdf160fc","modified":1472635805000},{"_id":"source/home/index.md","hash":"6fc61e0f3320015aca70a9b8cd666e3521f5d30f","modified":1472635863000},{"_id":"source/navigations/index.md","hash":"a54558c63d3b7438a894fb1636c9a31fbea96361","modified":1472635871000},{"_id":"source/tags/index.md","hash":"5e2b6b62081264daae3f0a218736e4b779c764f3","modified":1477400489000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"8c36ffb98604e08f5a9543b32a4dd3cae56f12d0","modified":1482736979000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1482736906000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"dc5bc0eeb31df89ca0b5e54928850704150a5711","modified":1482736979000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1482736906000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1482736883000},{"_id":"themes/yilia/.git/index","hash":"86e0c406ab2bcffca9c95cefb2ae24ce91e8a33c","modified":1482736975000},{"_id":"themes/yilia/.git/packed-refs","hash":"670e87dba9282322dba6d09733d2b871b6139747","modified":1482736906000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1482736906000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1482736906000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1482736906000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1482736906000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1482736906000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1482736906000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1482736906000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1482736906000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1482736906000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1482736906000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1482736906000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482736906000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482736906000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1482736906000},{"_id":"themes/yilia/source/main.css","hash":"978d85fb60d7b3fd3e1af41c84bdfcc8255ae0d0","modified":1482736906000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1482736883000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1482736883000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1482736883000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"bd52bd0e328dd6ba691844632ec4d96d89ddb46b","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"41864fc19e0ac26f46e820f0dc43e8537ad65d68","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"61729300919ac9dd1b7858ccb54c8d423f8e3665","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f2c5b1591117fb1c0b2d036a8a839aedbdd9341f","modified":1482738780000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"01d4b99f61a191bdc6668b8e1fefc8de91176f04","modified":1482742337000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"108f4c20b99c52507c04a9ce4a0089095143fb22","modified":1482739125000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"a66d7bb113142e3f9519680584df3a9122179c9d","modified":1482738752000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"9fd45151095fe00f5a848b3338e1ec32c1e358d2","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"f171b340aba366667916382c01cdb8761d3932fc","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"51f2b53afcdb7401ca96b7be10d7dff94d9e7593","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1482736906000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1482736906000},{"_id":"themes/yilia/source/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1482736906000},{"_id":"themes/yilia/source/fonts/iconfont.svg","hash":"b0bf757affb3d6e8f03326c0eb3100c44834f671","modified":1482736906000},{"_id":"themes/yilia/source/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1482736906000},{"_id":"themes/yilia/source/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1482736906000},{"_id":"themes/yilia/source/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482736906000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1482736906000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1482736906000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482736906000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1482736906000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1482736906000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1482736906000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"e0919422154e4cf2bcb4395c3f2e742d1e2cfa9e","modified":1482736906000},{"_id":"themes/yilia/source-src/js/main.js","hash":"5d1c569891368fbd360335116c82cb558c8cf3df","modified":1482736906000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"baf55e73a36a7cfa3a9b59df4ec7a78fd3d29318","modified":1482736906000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1482736906000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1482736906000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"6da005639288c7f94efd7700c31888f856392076","modified":1482736906000},{"_id":"themes/yilia/source-src/js/util.js","hash":"f54869caf9218bf71d6e2393d88ef83d96d9babb","modified":1482736906000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1482736906000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1482736906000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1482736906000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1482736906000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1482736906000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1482736906000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1482736906000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1482736906000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7c00f9102c9b102aa1370a346a0730e743351fbb","modified":1482736906000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"ae0a5ae744715b511563b3a447ff5a23c075f577","modified":1482736906000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1482736906000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1482736906000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"755882bc204487d9f6b95a82a1e8b060d44163b3","modified":1482736906000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1482736906000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"ea91a39daf15917760c04e1c2af2be72294f9a45","modified":1482736906000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1482736906000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"4277e4b7e8fef5480d8e2b9574cbfdf59f0225c8","modified":1482736906000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"9fea828d17c937fdcdc14018032873de26d1f59d","modified":1482736906000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1482736906000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1482736906000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1482736906000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1482736906000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1482736906000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1482736906000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"e66347a30ca9ec41997843cba6181207baeff217","modified":1482736906000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"5ec14977c604ebd142a77d5fd26fc9f04efe54e0","modified":1482736906000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1482736906000},{"_id":"themes/yilia/.git/objects/pack/pack-d1a70f60127c0654db2978f3e6588bfd14250025.idx","hash":"4fa5719891fa45457415ed1b8c3e0f390dccab40","modified":1482736906000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"dc5bc0eeb31df89ca0b5e54928850704150a5711","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"5ca1f97238235da9074f7ffe88fb68e7e81f8fd4","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"3a44b657ebdeed1764d90f81b43e91e5a8f25c21","modified":1482736906000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1482736906000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"b906bead91384ca23581c160c6743770eb58c0da","modified":1482736906000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1482736906000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1482736906000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1482736906000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1482736906000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1482736906000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"b0bf757affb3d6e8f03326c0eb3100c44834f671","modified":1482736906000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1482736906000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1482736906000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1482736906000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482736906000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482736906000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"bd52bd0e328dd6ba691844632ec4d96d89ddb46b","modified":1482736906000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1482736906000},{"_id":"themes/yilia/source/slider.js","hash":"a857e5aaefdac2ac214cb4b549d0743657ab4fba","modified":1482736906000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"bd52bd0e328dd6ba691844632ec4d96d89ddb46b","modified":1482736906000},{"_id":"themes/yilia/source/main.js","hash":"0924738d804a287c4566638828391f828c4eb9e3","modified":1482736906000},{"_id":"themes/yilia/.git/objects/pack/pack-d1a70f60127c0654db2978f3e6588bfd14250025.pack","hash":"ffacd596cb4cb94cdaaa3703b76599d499ffa19e","modified":1482736906000}],"Category":[],"Data":[],"Page":[{"title":"blogs","date":"2016-08-31T09:29:54.000Z","_content":"","source":"blogs/index.md","raw":"---\ntitle: blogs\ndate: 2016-08-31 17:29:54\n---\n","updated":"2016-08-31T09:29:54.000Z","path":"blogs/index.html","comments":1,"layout":"page","_id":"cix5uii5q0001yuxqlj57eswg","content":"","excerpt":"","more":""},{"title":"comments","date":"2016-08-31T09:30:05.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: comments\ndate: 2016-08-31 17:30:05\n---\n","updated":"2016-08-31T09:30:05.000Z","path":"comments/index.html","comments":1,"layout":"page","_id":"cix5uii5v0003yuxqtl3k8mv9","content":"","excerpt":"","more":""},{"title":"home","date":"2016-08-31T09:31:03.000Z","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2016-08-31 17:31:03\n---\n","updated":"2016-08-31T09:31:03.000Z","path":"home/index.html","comments":1,"layout":"page","_id":"cix5uii640006yuxqrhds3nr8","content":"","excerpt":"","more":""},{"title":"navigations","date":"2016-08-31T09:31:11.000Z","_content":"","source":"navigations/index.md","raw":"---\ntitle: navigations\ndate: 2016-08-31 17:31:11\n---\n","updated":"2016-08-31T09:31:11.000Z","path":"navigations/index.html","comments":1,"layout":"page","_id":"cix5uii6c0008yuxqo10ijpq1","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-10-25T13:01:29.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-25 21:01:29\n---\n","updated":"2016-10-25T13:01:29.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cix5uii6e000ayuxqcv9ze6wh","content":"","excerpt":"","more":""}],"Post":[{"title":"Dive into React Native performance","date":"2016-10-25T09:47:14.000Z","_content":"# [Dive into React Native performance](https://code.facebook.com/posts/895897210527114/)\n[React Native](https://facebook.github.io/react-native/) allows you to build iOS and Android apps in JavaScript using [React](https://facebook.github.io/react/) and [Relay](https://facebook.github.io/relay/)'s declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.\n\n## Why the hurry?\nWith an app that runs faster, content loads quickly, which means people get more time to interact with it, and smooth animations make the app enjoyable to use. In emerging markets, where 2011 class phones on 2G networks are the majority, a focus on performance can make the difference between an app that is usable and one that isn't.\n\nSince releasing React Native on iOS and on Android, we have been improving list view scrolling performance, memory efficiency, UI responsiveness, and app startup time. Startup sets the first impression of an app and stresses all parts of the framework, so it is the most rewarding and challenging problem to tackle.\n\n## Always be measuring\nWe converted the Events Dashboard feature in the Facebook for iOS app to React Native (navigate to the More tab in the app and tap Events to see it). This was the perfect candidate for testing performance because the native product was already highly optimized and provided a typical “interactive list of items” experience.\n![](https://scontent.xx.fbcdn.net/l/t39.2365-6/12679446_1168726623161282_931282499_n.jpg)\nFig. 1: The Events Dashboard screen\n\nNext, we set up an automated CT-Scan performance test that helped us navigate to the rightmost tab, which then opens and closes the Events Dashboard 50 times. During each of these iterations, we are able to measure the time it takes from tapping the Events button to events being visible on the screen. We also added more detailed performance markers to give us a good idea of which steps in the startup process were slow and taking up CPU time.\n\nHere is an overview of some of the steps we are measuring:\n\n* Native Initialization: Initialize the JavaScript virtual machine and all the native modules (disk cache, network, UI manager, etc.).\n* JS Init + Require: Read the minified JavaScript bundle file from disk and load it into the JavaScript virtual machine, which will parse it and generate bytecode as it requires the initial modules (mostly React, Relay, and their dependencies).\n* Before Fetch: Load and execute the Events Dashboard application code, build the Relay query, and kick off reading from the on-disk cache.\n* Fetch: Fetch data from the on-disk cache.\n* JS Render: Instantiate all the React components and send them to the native UI manager module for display.\n* Native Render: Calculate view sizes by computing the FlexBox layout on the shadow thread; create and position the views on the main thread.\n![](https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfp1/t39.2365-6/12679489_247741662231959_787037748_n.jpg)\nFig. 2: Events Dashboard startup performance\n\nOur golden rule from then on: Never regress the test. We run it continuously to track performance improvements and regressions, and developers can run it on a specific commit to get a detailed performance analysis before pushing the change. Other tests have been set up to measure scroll performance and memory usage in the same way.\n\n## What happens on startup\nWith automated performance tracking in place, we needed a tool that could give us more details on what exactly needed improvement during startup. We added detailed start/stop performance markers throughout our frameworks, collected the data, and used the catapult viewer to identify hot spots and blocking interactions across threads. You can trigger profiling on your app from the developer menu.\n\nWith React Native, your code is executed on the JavaScript thread. Whenever you want to write data to the disk, make a network request, or access any other native resource (like the camera), your code needs to call a native module. When you render your components with React, they will be forwarded to the UI manager native module, which will then perform layout and create the resulting views on the main thread. The bridge will forward your call to the module and call back to your code, if needed. In React Native, all native calls have to be asynchronous to avoid blocking the main thread or the JS thread.\n\nIn the below Events Dashboard startup visualization, we can see that the app, which is running on the JS queue, triggers a cache read for the events to be displayed, which is triggered on the async local storage queue. Once it gets the cached data back, the app renders the events cells on the JS queue with React, which then passes it on to the shadow queue for layout and finally to the main queue for view creation. This example shows multiple cache reads (using one common read operation may be faster) and a few React render operations on the JS thread that might be consolidated.\n![](https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xpf1/t39.2365-6/12427047_188833171499254_295261012_n.jpg)\nFig. 3: Events Dashboard startup visualization\n\n## Performance improvements\nHere are a few of the most significant efficiency and scheduling improvements we have made to reach our results, with links to the relevant commits.\n\n## Doing less\n* Cleanup Require/Babel helpers (high impact): Removes helper code executed during require() that was specific to our website and not needed for React Native.\n\n* Avoid copying and decoding strings when loading the bundle (medium impact): Passing a UTF-8 string to the JavaScriptCore virtual machine will cause it to trigger a slower conversion to UCS-2 format. Encoding it in ASCII format instead will avoid the conversion. Getting rid of the intermediate NSString representation also improves performance by avoiding one more conversion. We discovered these improvements through extensive benchmarking of the bundle loading step.\n\n* Stripping DEV-only modules (low impact): Unlike compiled code, JavaScript doesn't have a preprocessor that can strip debugging features in release mode. Using a Babel transform, we were able to remove code living behind __DEV__ statements, effectively reducing bundle size, which improves JavaScript parse time.\n\n* Generate event descriptions on the server (low impact): Instead of fetching data to generate a sentence describing which friends are coming to an event, generate it on the server, which reduces the data we have to receive and parse, and avoid all the client-side processing to generate the sentence.\n\n## Scheduling\n* Lazy requires (low impact): Instead of executing all JavaScript module require calls up front, trigger a require call only the first time we need it. This optimization effectively avoids requiring modules that are never used, and it has also proved to be successful on the web.\n\n* Relay incremental cache read (high impact): Relay was initially written for the web and had only an in-memory response cache. The first on-disk response cache was reading the entire cache from the disk. By reading only the content required to fulfill a particular query, we significantly reduced the I/O overhead and native-to-JS bridge traffic.\n\n* De-batching bridge calls, batch Relay calls (high impact): We initially thought that sending JS calls to native in batches would reduce the overhead of calling over the native-to-JS bridge, but performance analysis showed the overhead of JS calls to native was not a bottleneck: In fact, delaying UI or cache read calls to batch them with later calls also delayed work on the native thread, which harmed performance. In other cases, like the Relay cache read fetching data for multiple keys, batching proved to be a significant improvement.\n\n* Early UI flushing (low impact): We also batched UI updates to enforce consistency, but sending layout commands as soon as they are ready proved to be more efficient because the native UI manager can work in parallel with the JavaScript thread.\n\n* Lazy native modules loading (low impact): Initialize a native module only the first time we use it, which avoids initializing the modules we do not need.\n\n* Lazy touch bindings on text components (low impact): Binding touch event callbacks takes a significant amount of time. Instead of doing all that work up front, we are now only binding the touch down event (when you first touch a target) and bind all the other callbacks only when you start touching the element.\n\n* Defer popular events query (medium impact): The first screen of information is populated by the events query, and we will then show popular events after these. Deferring that query reduces contention when populating the screen with events.\n\n## Prepare for light-speed\nA few months ago, Events Dashboard startup took two seconds on the iPhone 5. After a lot of work from the React Native Performance, React Native, React, and Relay teams in London, Menlo Park, and New York, Events Dashboard startup is now twice as fast. Most of the improvements we made were done at the framework level, which means your React Native app will automatically benefit when migrating to the latest version of React Native.\n\nThese improvements are just the beginning: We continue to work on making every part of the stack faster, from JavaScript parse time to data-fetching performance. And you can contribute, learn how to make your apps faster, and ask any questions you may have in our community!","source":"_posts/Dive into React Native performance.md","raw":"---\ntitle: Dive into React Native performance\ndate: 2016-10-25 17:47:14\ntags: react-native\n---\n# [Dive into React Native performance](https://code.facebook.com/posts/895897210527114/)\n[React Native](https://facebook.github.io/react-native/) allows you to build iOS and Android apps in JavaScript using [React](https://facebook.github.io/react/) and [Relay](https://facebook.github.io/relay/)'s declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.\n\n## Why the hurry?\nWith an app that runs faster, content loads quickly, which means people get more time to interact with it, and smooth animations make the app enjoyable to use. In emerging markets, where 2011 class phones on 2G networks are the majority, a focus on performance can make the difference between an app that is usable and one that isn't.\n\nSince releasing React Native on iOS and on Android, we have been improving list view scrolling performance, memory efficiency, UI responsiveness, and app startup time. Startup sets the first impression of an app and stresses all parts of the framework, so it is the most rewarding and challenging problem to tackle.\n\n## Always be measuring\nWe converted the Events Dashboard feature in the Facebook for iOS app to React Native (navigate to the More tab in the app and tap Events to see it). This was the perfect candidate for testing performance because the native product was already highly optimized and provided a typical “interactive list of items” experience.\n![](https://scontent.xx.fbcdn.net/l/t39.2365-6/12679446_1168726623161282_931282499_n.jpg)\nFig. 1: The Events Dashboard screen\n\nNext, we set up an automated CT-Scan performance test that helped us navigate to the rightmost tab, which then opens and closes the Events Dashboard 50 times. During each of these iterations, we are able to measure the time it takes from tapping the Events button to events being visible on the screen. We also added more detailed performance markers to give us a good idea of which steps in the startup process were slow and taking up CPU time.\n\nHere is an overview of some of the steps we are measuring:\n\n* Native Initialization: Initialize the JavaScript virtual machine and all the native modules (disk cache, network, UI manager, etc.).\n* JS Init + Require: Read the minified JavaScript bundle file from disk and load it into the JavaScript virtual machine, which will parse it and generate bytecode as it requires the initial modules (mostly React, Relay, and their dependencies).\n* Before Fetch: Load and execute the Events Dashboard application code, build the Relay query, and kick off reading from the on-disk cache.\n* Fetch: Fetch data from the on-disk cache.\n* JS Render: Instantiate all the React components and send them to the native UI manager module for display.\n* Native Render: Calculate view sizes by computing the FlexBox layout on the shadow thread; create and position the views on the main thread.\n![](https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfp1/t39.2365-6/12679489_247741662231959_787037748_n.jpg)\nFig. 2: Events Dashboard startup performance\n\nOur golden rule from then on: Never regress the test. We run it continuously to track performance improvements and regressions, and developers can run it on a specific commit to get a detailed performance analysis before pushing the change. Other tests have been set up to measure scroll performance and memory usage in the same way.\n\n## What happens on startup\nWith automated performance tracking in place, we needed a tool that could give us more details on what exactly needed improvement during startup. We added detailed start/stop performance markers throughout our frameworks, collected the data, and used the catapult viewer to identify hot spots and blocking interactions across threads. You can trigger profiling on your app from the developer menu.\n\nWith React Native, your code is executed on the JavaScript thread. Whenever you want to write data to the disk, make a network request, or access any other native resource (like the camera), your code needs to call a native module. When you render your components with React, they will be forwarded to the UI manager native module, which will then perform layout and create the resulting views on the main thread. The bridge will forward your call to the module and call back to your code, if needed. In React Native, all native calls have to be asynchronous to avoid blocking the main thread or the JS thread.\n\nIn the below Events Dashboard startup visualization, we can see that the app, which is running on the JS queue, triggers a cache read for the events to be displayed, which is triggered on the async local storage queue. Once it gets the cached data back, the app renders the events cells on the JS queue with React, which then passes it on to the shadow queue for layout and finally to the main queue for view creation. This example shows multiple cache reads (using one common read operation may be faster) and a few React render operations on the JS thread that might be consolidated.\n![](https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xpf1/t39.2365-6/12427047_188833171499254_295261012_n.jpg)\nFig. 3: Events Dashboard startup visualization\n\n## Performance improvements\nHere are a few of the most significant efficiency and scheduling improvements we have made to reach our results, with links to the relevant commits.\n\n## Doing less\n* Cleanup Require/Babel helpers (high impact): Removes helper code executed during require() that was specific to our website and not needed for React Native.\n\n* Avoid copying and decoding strings when loading the bundle (medium impact): Passing a UTF-8 string to the JavaScriptCore virtual machine will cause it to trigger a slower conversion to UCS-2 format. Encoding it in ASCII format instead will avoid the conversion. Getting rid of the intermediate NSString representation also improves performance by avoiding one more conversion. We discovered these improvements through extensive benchmarking of the bundle loading step.\n\n* Stripping DEV-only modules (low impact): Unlike compiled code, JavaScript doesn't have a preprocessor that can strip debugging features in release mode. Using a Babel transform, we were able to remove code living behind __DEV__ statements, effectively reducing bundle size, which improves JavaScript parse time.\n\n* Generate event descriptions on the server (low impact): Instead of fetching data to generate a sentence describing which friends are coming to an event, generate it on the server, which reduces the data we have to receive and parse, and avoid all the client-side processing to generate the sentence.\n\n## Scheduling\n* Lazy requires (low impact): Instead of executing all JavaScript module require calls up front, trigger a require call only the first time we need it. This optimization effectively avoids requiring modules that are never used, and it has also proved to be successful on the web.\n\n* Relay incremental cache read (high impact): Relay was initially written for the web and had only an in-memory response cache. The first on-disk response cache was reading the entire cache from the disk. By reading only the content required to fulfill a particular query, we significantly reduced the I/O overhead and native-to-JS bridge traffic.\n\n* De-batching bridge calls, batch Relay calls (high impact): We initially thought that sending JS calls to native in batches would reduce the overhead of calling over the native-to-JS bridge, but performance analysis showed the overhead of JS calls to native was not a bottleneck: In fact, delaying UI or cache read calls to batch them with later calls also delayed work on the native thread, which harmed performance. In other cases, like the Relay cache read fetching data for multiple keys, batching proved to be a significant improvement.\n\n* Early UI flushing (low impact): We also batched UI updates to enforce consistency, but sending layout commands as soon as they are ready proved to be more efficient because the native UI manager can work in parallel with the JavaScript thread.\n\n* Lazy native modules loading (low impact): Initialize a native module only the first time we use it, which avoids initializing the modules we do not need.\n\n* Lazy touch bindings on text components (low impact): Binding touch event callbacks takes a significant amount of time. Instead of doing all that work up front, we are now only binding the touch down event (when you first touch a target) and bind all the other callbacks only when you start touching the element.\n\n* Defer popular events query (medium impact): The first screen of information is populated by the events query, and we will then show popular events after these. Deferring that query reduces contention when populating the screen with events.\n\n## Prepare for light-speed\nA few months ago, Events Dashboard startup took two seconds on the iPhone 5. After a lot of work from the React Native Performance, React Native, React, and Relay teams in London, Menlo Park, and New York, Events Dashboard startup is now twice as fast. Most of the improvements we made were done at the framework level, which means your React Native app will automatically benefit when migrating to the latest version of React Native.\n\nThese improvements are just the beginning: We continue to work on making every part of the stack faster, from JavaScript parse time to data-fetching performance. And you can contribute, learn how to make your apps faster, and ask any questions you may have in our community!","slug":"Dive into React Native performance","published":1,"updated":"2016-10-26T03:03:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix5uii5k0000yuxqwblasr47","content":"<h1 id=\"Dive-into-React-Native-performance\"><a href=\"#Dive-into-React-Native-performance\" class=\"headerlink\" title=\"Dive into React Native performance\"></a><a href=\"https://code.facebook.com/posts/895897210527114/\" target=\"_blank\" rel=\"external\">Dive into React Native performance</a></h1><p><a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"external\">React Native</a> allows you to build iOS and Android apps in JavaScript using <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a> and <a href=\"https://facebook.github.io/relay/\" target=\"_blank\" rel=\"external\">Relay</a>‘s declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.</p>\n<h2 id=\"Why-the-hurry\"><a href=\"#Why-the-hurry\" class=\"headerlink\" title=\"Why the hurry?\"></a>Why the hurry?</h2><p>With an app that runs faster, content loads quickly, which means people get more time to interact with it, and smooth animations make the app enjoyable to use. In emerging markets, where 2011 class phones on 2G networks are the majority, a focus on performance can make the difference between an app that is usable and one that isn’t.</p>\n<p>Since releasing React Native on iOS and on Android, we have been improving list view scrolling performance, memory efficiency, UI responsiveness, and app startup time. Startup sets the first impression of an app and stresses all parts of the framework, so it is the most rewarding and challenging problem to tackle.</p>\n<h2 id=\"Always-be-measuring\"><a href=\"#Always-be-measuring\" class=\"headerlink\" title=\"Always be measuring\"></a>Always be measuring</h2><p>We converted the Events Dashboard feature in the Facebook for iOS app to React Native (navigate to the More tab in the app and tap Events to see it). This was the perfect candidate for testing performance because the native product was already highly optimized and provided a typical “interactive list of items” experience.<br><img src=\"https://scontent.xx.fbcdn.net/l/t39.2365-6/12679446_1168726623161282_931282499_n.jpg\" alt=\"\"><br>Fig. 1: The Events Dashboard screen</p>\n<p>Next, we set up an automated CT-Scan performance test that helped us navigate to the rightmost tab, which then opens and closes the Events Dashboard 50 times. During each of these iterations, we are able to measure the time it takes from tapping the Events button to events being visible on the screen. We also added more detailed performance markers to give us a good idea of which steps in the startup process were slow and taking up CPU time.</p>\n<p>Here is an overview of some of the steps we are measuring:</p>\n<ul>\n<li>Native Initialization: Initialize the JavaScript virtual machine and all the native modules (disk cache, network, UI manager, etc.).</li>\n<li>JS Init + Require: Read the minified JavaScript bundle file from disk and load it into the JavaScript virtual machine, which will parse it and generate bytecode as it requires the initial modules (mostly React, Relay, and their dependencies).</li>\n<li>Before Fetch: Load and execute the Events Dashboard application code, build the Relay query, and kick off reading from the on-disk cache.</li>\n<li>Fetch: Fetch data from the on-disk cache.</li>\n<li>JS Render: Instantiate all the React components and send them to the native UI manager module for display.</li>\n<li>Native Render: Calculate view sizes by computing the FlexBox layout on the shadow thread; create and position the views on the main thread.<br><img src=\"https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfp1/t39.2365-6/12679489_247741662231959_787037748_n.jpg\" alt=\"\"><br>Fig. 2: Events Dashboard startup performance</li>\n</ul>\n<p>Our golden rule from then on: Never regress the test. We run it continuously to track performance improvements and regressions, and developers can run it on a specific commit to get a detailed performance analysis before pushing the change. Other tests have been set up to measure scroll performance and memory usage in the same way.</p>\n<h2 id=\"What-happens-on-startup\"><a href=\"#What-happens-on-startup\" class=\"headerlink\" title=\"What happens on startup\"></a>What happens on startup</h2><p>With automated performance tracking in place, we needed a tool that could give us more details on what exactly needed improvement during startup. We added detailed start/stop performance markers throughout our frameworks, collected the data, and used the catapult viewer to identify hot spots and blocking interactions across threads. You can trigger profiling on your app from the developer menu.</p>\n<p>With React Native, your code is executed on the JavaScript thread. Whenever you want to write data to the disk, make a network request, or access any other native resource (like the camera), your code needs to call a native module. When you render your components with React, they will be forwarded to the UI manager native module, which will then perform layout and create the resulting views on the main thread. The bridge will forward your call to the module and call back to your code, if needed. In React Native, all native calls have to be asynchronous to avoid blocking the main thread or the JS thread.</p>\n<p>In the below Events Dashboard startup visualization, we can see that the app, which is running on the JS queue, triggers a cache read for the events to be displayed, which is triggered on the async local storage queue. Once it gets the cached data back, the app renders the events cells on the JS queue with React, which then passes it on to the shadow queue for layout and finally to the main queue for view creation. This example shows multiple cache reads (using one common read operation may be faster) and a few React render operations on the JS thread that might be consolidated.<br><img src=\"https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xpf1/t39.2365-6/12427047_188833171499254_295261012_n.jpg\" alt=\"\"><br>Fig. 3: Events Dashboard startup visualization</p>\n<h2 id=\"Performance-improvements\"><a href=\"#Performance-improvements\" class=\"headerlink\" title=\"Performance improvements\"></a>Performance improvements</h2><p>Here are a few of the most significant efficiency and scheduling improvements we have made to reach our results, with links to the relevant commits.</p>\n<h2 id=\"Doing-less\"><a href=\"#Doing-less\" class=\"headerlink\" title=\"Doing less\"></a>Doing less</h2><ul>\n<li><p>Cleanup Require/Babel helpers (high impact): Removes helper code executed during require() that was specific to our website and not needed for React Native.</p>\n</li>\n<li><p>Avoid copying and decoding strings when loading the bundle (medium impact): Passing a UTF-8 string to the JavaScriptCore virtual machine will cause it to trigger a slower conversion to UCS-2 format. Encoding it in ASCII format instead will avoid the conversion. Getting rid of the intermediate NSString representation also improves performance by avoiding one more conversion. We discovered these improvements through extensive benchmarking of the bundle loading step.</p>\n</li>\n<li><p>Stripping DEV-only modules (low impact): Unlike compiled code, JavaScript doesn’t have a preprocessor that can strip debugging features in release mode. Using a Babel transform, we were able to remove code living behind <strong>DEV</strong> statements, effectively reducing bundle size, which improves JavaScript parse time.</p>\n</li>\n<li><p>Generate event descriptions on the server (low impact): Instead of fetching data to generate a sentence describing which friends are coming to an event, generate it on the server, which reduces the data we have to receive and parse, and avoid all the client-side processing to generate the sentence.</p>\n</li>\n</ul>\n<h2 id=\"Scheduling\"><a href=\"#Scheduling\" class=\"headerlink\" title=\"Scheduling\"></a>Scheduling</h2><ul>\n<li><p>Lazy requires (low impact): Instead of executing all JavaScript module require calls up front, trigger a require call only the first time we need it. This optimization effectively avoids requiring modules that are never used, and it has also proved to be successful on the web.</p>\n</li>\n<li><p>Relay incremental cache read (high impact): Relay was initially written for the web and had only an in-memory response cache. The first on-disk response cache was reading the entire cache from the disk. By reading only the content required to fulfill a particular query, we significantly reduced the I/O overhead and native-to-JS bridge traffic.</p>\n</li>\n<li><p>De-batching bridge calls, batch Relay calls (high impact): We initially thought that sending JS calls to native in batches would reduce the overhead of calling over the native-to-JS bridge, but performance analysis showed the overhead of JS calls to native was not a bottleneck: In fact, delaying UI or cache read calls to batch them with later calls also delayed work on the native thread, which harmed performance. In other cases, like the Relay cache read fetching data for multiple keys, batching proved to be a significant improvement.</p>\n</li>\n<li><p>Early UI flushing (low impact): We also batched UI updates to enforce consistency, but sending layout commands as soon as they are ready proved to be more efficient because the native UI manager can work in parallel with the JavaScript thread.</p>\n</li>\n<li><p>Lazy native modules loading (low impact): Initialize a native module only the first time we use it, which avoids initializing the modules we do not need.</p>\n</li>\n<li><p>Lazy touch bindings on text components (low impact): Binding touch event callbacks takes a significant amount of time. Instead of doing all that work up front, we are now only binding the touch down event (when you first touch a target) and bind all the other callbacks only when you start touching the element.</p>\n</li>\n<li><p>Defer popular events query (medium impact): The first screen of information is populated by the events query, and we will then show popular events after these. Deferring that query reduces contention when populating the screen with events.</p>\n</li>\n</ul>\n<h2 id=\"Prepare-for-light-speed\"><a href=\"#Prepare-for-light-speed\" class=\"headerlink\" title=\"Prepare for light-speed\"></a>Prepare for light-speed</h2><p>A few months ago, Events Dashboard startup took two seconds on the iPhone 5. After a lot of work from the React Native Performance, React Native, React, and Relay teams in London, Menlo Park, and New York, Events Dashboard startup is now twice as fast. Most of the improvements we made were done at the framework level, which means your React Native app will automatically benefit when migrating to the latest version of React Native.</p>\n<p>These improvements are just the beginning: We continue to work on making every part of the stack faster, from JavaScript parse time to data-fetching performance. And you can contribute, learn how to make your apps faster, and ask any questions you may have in our community!</p>\n","excerpt":"","more":"<h1 id=\"Dive-into-React-Native-performance\"><a href=\"#Dive-into-React-Native-performance\" class=\"headerlink\" title=\"Dive into React Native performance\"></a><a href=\"https://code.facebook.com/posts/895897210527114/\">Dive into React Native performance</a></h1><p><a href=\"https://facebook.github.io/react-native/\">React Native</a> allows you to build iOS and Android apps in JavaScript using <a href=\"https://facebook.github.io/react/\">React</a> and <a href=\"https://facebook.github.io/relay/\">Relay</a>‘s declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.</p>\n<h2 id=\"Why-the-hurry\"><a href=\"#Why-the-hurry\" class=\"headerlink\" title=\"Why the hurry?\"></a>Why the hurry?</h2><p>With an app that runs faster, content loads quickly, which means people get more time to interact with it, and smooth animations make the app enjoyable to use. In emerging markets, where 2011 class phones on 2G networks are the majority, a focus on performance can make the difference between an app that is usable and one that isn’t.</p>\n<p>Since releasing React Native on iOS and on Android, we have been improving list view scrolling performance, memory efficiency, UI responsiveness, and app startup time. Startup sets the first impression of an app and stresses all parts of the framework, so it is the most rewarding and challenging problem to tackle.</p>\n<h2 id=\"Always-be-measuring\"><a href=\"#Always-be-measuring\" class=\"headerlink\" title=\"Always be measuring\"></a>Always be measuring</h2><p>We converted the Events Dashboard feature in the Facebook for iOS app to React Native (navigate to the More tab in the app and tap Events to see it). This was the perfect candidate for testing performance because the native product was already highly optimized and provided a typical “interactive list of items” experience.<br><img src=\"https://scontent.xx.fbcdn.net/l/t39.2365-6/12679446_1168726623161282_931282499_n.jpg\" alt=\"\"><br>Fig. 1: The Events Dashboard screen</p>\n<p>Next, we set up an automated CT-Scan performance test that helped us navigate to the rightmost tab, which then opens and closes the Events Dashboard 50 times. During each of these iterations, we are able to measure the time it takes from tapping the Events button to events being visible on the screen. We also added more detailed performance markers to give us a good idea of which steps in the startup process were slow and taking up CPU time.</p>\n<p>Here is an overview of some of the steps we are measuring:</p>\n<ul>\n<li>Native Initialization: Initialize the JavaScript virtual machine and all the native modules (disk cache, network, UI manager, etc.).</li>\n<li>JS Init + Require: Read the minified JavaScript bundle file from disk and load it into the JavaScript virtual machine, which will parse it and generate bytecode as it requires the initial modules (mostly React, Relay, and their dependencies).</li>\n<li>Before Fetch: Load and execute the Events Dashboard application code, build the Relay query, and kick off reading from the on-disk cache.</li>\n<li>Fetch: Fetch data from the on-disk cache.</li>\n<li>JS Render: Instantiate all the React components and send them to the native UI manager module for display.</li>\n<li>Native Render: Calculate view sizes by computing the FlexBox layout on the shadow thread; create and position the views on the main thread.<br><img src=\"https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xfp1/t39.2365-6/12679489_247741662231959_787037748_n.jpg\" alt=\"\"><br>Fig. 2: Events Dashboard startup performance</li>\n</ul>\n<p>Our golden rule from then on: Never regress the test. We run it continuously to track performance improvements and regressions, and developers can run it on a specific commit to get a detailed performance analysis before pushing the change. Other tests have been set up to measure scroll performance and memory usage in the same way.</p>\n<h2 id=\"What-happens-on-startup\"><a href=\"#What-happens-on-startup\" class=\"headerlink\" title=\"What happens on startup\"></a>What happens on startup</h2><p>With automated performance tracking in place, we needed a tool that could give us more details on what exactly needed improvement during startup. We added detailed start/stop performance markers throughout our frameworks, collected the data, and used the catapult viewer to identify hot spots and blocking interactions across threads. You can trigger profiling on your app from the developer menu.</p>\n<p>With React Native, your code is executed on the JavaScript thread. Whenever you want to write data to the disk, make a network request, or access any other native resource (like the camera), your code needs to call a native module. When you render your components with React, they will be forwarded to the UI manager native module, which will then perform layout and create the resulting views on the main thread. The bridge will forward your call to the module and call back to your code, if needed. In React Native, all native calls have to be asynchronous to avoid blocking the main thread or the JS thread.</p>\n<p>In the below Events Dashboard startup visualization, we can see that the app, which is running on the JS queue, triggers a cache read for the events to be displayed, which is triggered on the async local storage queue. Once it gets the cached data back, the app renders the events cells on the JS queue with React, which then passes it on to the shadow queue for layout and finally to the main queue for view creation. This example shows multiple cache reads (using one common read operation may be faster) and a few React render operations on the JS thread that might be consolidated.<br><img src=\"https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-xpf1/t39.2365-6/12427047_188833171499254_295261012_n.jpg\" alt=\"\"><br>Fig. 3: Events Dashboard startup visualization</p>\n<h2 id=\"Performance-improvements\"><a href=\"#Performance-improvements\" class=\"headerlink\" title=\"Performance improvements\"></a>Performance improvements</h2><p>Here are a few of the most significant efficiency and scheduling improvements we have made to reach our results, with links to the relevant commits.</p>\n<h2 id=\"Doing-less\"><a href=\"#Doing-less\" class=\"headerlink\" title=\"Doing less\"></a>Doing less</h2><ul>\n<li><p>Cleanup Require/Babel helpers (high impact): Removes helper code executed during require() that was specific to our website and not needed for React Native.</p>\n</li>\n<li><p>Avoid copying and decoding strings when loading the bundle (medium impact): Passing a UTF-8 string to the JavaScriptCore virtual machine will cause it to trigger a slower conversion to UCS-2 format. Encoding it in ASCII format instead will avoid the conversion. Getting rid of the intermediate NSString representation also improves performance by avoiding one more conversion. We discovered these improvements through extensive benchmarking of the bundle loading step.</p>\n</li>\n<li><p>Stripping DEV-only modules (low impact): Unlike compiled code, JavaScript doesn’t have a preprocessor that can strip debugging features in release mode. Using a Babel transform, we were able to remove code living behind <strong>DEV</strong> statements, effectively reducing bundle size, which improves JavaScript parse time.</p>\n</li>\n<li><p>Generate event descriptions on the server (low impact): Instead of fetching data to generate a sentence describing which friends are coming to an event, generate it on the server, which reduces the data we have to receive and parse, and avoid all the client-side processing to generate the sentence.</p>\n</li>\n</ul>\n<h2 id=\"Scheduling\"><a href=\"#Scheduling\" class=\"headerlink\" title=\"Scheduling\"></a>Scheduling</h2><ul>\n<li><p>Lazy requires (low impact): Instead of executing all JavaScript module require calls up front, trigger a require call only the first time we need it. This optimization effectively avoids requiring modules that are never used, and it has also proved to be successful on the web.</p>\n</li>\n<li><p>Relay incremental cache read (high impact): Relay was initially written for the web and had only an in-memory response cache. The first on-disk response cache was reading the entire cache from the disk. By reading only the content required to fulfill a particular query, we significantly reduced the I/O overhead and native-to-JS bridge traffic.</p>\n</li>\n<li><p>De-batching bridge calls, batch Relay calls (high impact): We initially thought that sending JS calls to native in batches would reduce the overhead of calling over the native-to-JS bridge, but performance analysis showed the overhead of JS calls to native was not a bottleneck: In fact, delaying UI or cache read calls to batch them with later calls also delayed work on the native thread, which harmed performance. In other cases, like the Relay cache read fetching data for multiple keys, batching proved to be a significant improvement.</p>\n</li>\n<li><p>Early UI flushing (low impact): We also batched UI updates to enforce consistency, but sending layout commands as soon as they are ready proved to be more efficient because the native UI manager can work in parallel with the JavaScript thread.</p>\n</li>\n<li><p>Lazy native modules loading (low impact): Initialize a native module only the first time we use it, which avoids initializing the modules we do not need.</p>\n</li>\n<li><p>Lazy touch bindings on text components (low impact): Binding touch event callbacks takes a significant amount of time. Instead of doing all that work up front, we are now only binding the touch down event (when you first touch a target) and bind all the other callbacks only when you start touching the element.</p>\n</li>\n<li><p>Defer popular events query (medium impact): The first screen of information is populated by the events query, and we will then show popular events after these. Deferring that query reduces contention when populating the screen with events.</p>\n</li>\n</ul>\n<h2 id=\"Prepare-for-light-speed\"><a href=\"#Prepare-for-light-speed\" class=\"headerlink\" title=\"Prepare for light-speed\"></a>Prepare for light-speed</h2><p>A few months ago, Events Dashboard startup took two seconds on the iPhone 5. After a lot of work from the React Native Performance, React Native, React, and Relay teams in London, Menlo Park, and New York, Events Dashboard startup is now twice as fast. Most of the improvements we made were done at the framework level, which means your React Native app will automatically benefit when migrating to the latest version of React Native.</p>\n<p>These improvements are just the beginning: We continue to work on making every part of the stack faster, from JavaScript parse time to data-fetching performance. And you can contribute, learn how to make your apps faster, and ask any questions you may have in our community!</p>\n"},{"title":"Android多个React-Native模块的实现及源码解读","date":"2016-11-16T07:31:14.000Z","_content":"这里我们废话不多说,只围绕主题讲一些技术方面的干货.(本文基于React-Native0.36.0版本)\n\n我们之所以在native app中引入react-native(以下简称RN)框架,是为了将native app中的一些不确定的UI布局,逻辑,业务,流程等等因素,交由远端来控制.也就是说,RN的bundle文件都是由远端下发,然而我们为了最优化展现RN页面,往往都会提前下载好所需要的bundle文件以节省网络交互时间.所以这篇博客我们是基于RN各模块(ComponentName)所对应的JS bundle文件已经下载到本地目标文件夹的前提下来写的.关于bundle文件的版本管理等我们在文末会详细介绍.\n\n# ReactNativeHost\n我们将RN库引入工程之后,第一件事情就是改造Application类.我们需要在自己的Application中实现一个接口----ReactApplication\n\n```\npublic interface ReactApplication {\n    ReactNativeHost getReactNativeHost();\n}\n```\n这个接口中只有一个方法,而ReactNativeHost是一个抽象类,其中有两个抽象方法需要实现(一会将提到).这个方法返回ReactNativeHost对象,这个对象里面可以指定RN的调试模式,以及native给JS暴露的一些通信模块,同时还可以指定当前上下文加载的bundle文件路径.为了达到多个RN模块的切换,我们在Application中维护了一个<bundlePath,ReactNativeHost>的map(为什么这么做?紧接着会介绍):\n\n`private HashMap<String, ReactNativeHost> mReactHostMap = MapBuilder.newHashMap();`\n\n来看看我们是怎么实现上面的接口以及如何维护这个map的:\n\n```\npublic String gReactNativeBundlePath = \"myBundlePath...\";\n\n@Override\n    public ReactNativeHost getReactNativeHost() {\n        synchronized (gReactNativeBundlePath) {\n            if (!mReactHostMap.containsKey(gReactNativeBundlePath)) {\n                ReactNativeHost host = new ReactNativeHost(this) {\n                    @Override\n                    protected boolean getUseDeveloperSupport() {\n                        return BuildConfig.REACT_DEBUG;\n                    }\n\n                    @Override\n                    protected List<ReactPackage> getPackages() {\n                        return Arrays.asList(new MainReactPackage(), new CustomReactPackage());\n                    }\n\n                    @Override\n                    protected String getJSBundleFile() {\n                        return gReactNativeBundlePath;\n                    }\n                };\n                mReactHostMap.put(gReactNativeBundlePath, host);\n            }\n            return mReactHostMap.get(gReactNativeBundlePath);\n        }\n    }\n```\n先来看看我们创建的ReactNativeHost的实现:\n\n* getUseDeveloperSupport \n\n\t抽象方法,用来控制RN调试开关的,一般直接复用BuildConfig.DEBUG开关就行,如果有冲突就自行新建一个buildConfigField(如这里的BuildConfig.REACT_DEBUG).\n* getPackages\n\n\t用于指定JS和native通信的ReactPackage,在ReactPackage中可以指定native和JS通信的一些module.其中MainReactPackage是RN已经封装好一些native module和view manager等.\n* getJSBundleFile\n\n\t用于ReactNativeHost创建ReactInstanceManager时指定对应的本地JS bundle文件路径.如果返回null,则从getBundleAssetName接口取assets中的对应文件(一般仅用于调试).\n\n接下来我们看看为什么要用维护<bundlePath,ReactNativeHost>映射map的方式来实现多个RN模块的切换.\n\n# ReactActivity\n\n当RN页面构建的时候,RN提供了ReactActivity组件来展示页面.值得一提的是,ReactActivity是一个抽象类,但是此类中没有抽象方法,像getMainComponentName这样需要子类中实现的方法却没有加抽象标识,这应该是facebook的RN团队疏忽了.在ReactActivity类中,可以看到以下代码:\n\n```\nprivate final ReactActivityDelegate mDelegate = this.createReactActivityDelegate();\n\nprotected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        this.mDelegate.onCreate(savedInstanceState);\n    }\n```\n这里createReactActivityDelegate时,会将ReactActivity中指定的RN模块名(即getMainComponentName)传入ReactActivityDelegate,紧接着是调用ReactActivityDelegate对应的生命周期onCreate,来看看里面都做了些什么:\n\n```\nprotected void onCreate(Bundle savedInstanceState) {\n        if(this.getReactNativeHost().getUseDeveloperSupport() && VERSION.SDK_INT >= 23 && !Settings.canDrawOverlays(this.getContext())) {\n            Intent serviceIntent = new Intent(\"android.settings.action.MANAGE_OVERLAY_PERMISSION\");\n            this.getContext().startActivity(serviceIntent);\n            FLog.w(\"React\", \"Overlay permissions needs to be granted in order for react native apps to run in dev mode\");\n            Toast.makeText(this.getContext(), \"Overlay permissions needs to be granted in order for react native apps to run in dev mode\", 1).show();\n        }\n\n        if(this.mMainComponentName != null) {\n            this.loadApp(this.mMainComponentName);\n        }\n\n        this.mDoubleTapReloadRecognizer = new DoubleTapReloadRecognizer();\n    }\n```\n----\n第一个if块中的代码很简单,就是当RN在调试模式下,针对系统在SDK23以上创建RN调试悬浮窗的权限判断,没有权限则请求用户授权.Android官方文档:\n\t\n```\nNote: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests\n the user's approval by sending an intent with action \nACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling\n\nSettings.canDrawOverlays().\n```\n----\n第二个if块是最关键的.通过ReactActivityDelegate来loadApp,这也是最耗时的操作,展现RN页面慢/白屏的根源.这里主要是创建ReactRootView以及初始化React上下文环境.\n\n```\nprotected void loadApp(String appKey) {\n        if(this.mReactRootView != null) {\n            throw new IllegalStateException(\"Cannot loadApp while app is already running.\");\n        } else {\n            this.mReactRootView = this.createRootView();\n            this.mReactRootView.startReactApplication(this.getReactNativeHost().getReactInstanceManager(), appKey, this.getLaunchOptions());\n            this.getPlainActivity().setContentView(this.mReactRootView);\n        }\n    }\n```\n如何优化RN的性能和展现效率,主要就是针对这一个耗时方法进行优化即可.可以对ReactRootView进行缓存管理以及将创建React上下文环境提前预处理.\n我们来看看上面的遗留问题----为什么要用维护<bundlePath,ReactNativeHost>映射map的方式来实现多个RN模块的切换.在启动RN应用时startReactApplication需要传入ReactNativeHost中的ReactInstanceManager对象,我们来看看源码(ReactNativeHost.java):\n\n```\npublic ReactInstanceManager getReactInstanceManager() {\n        if(this.mReactInstanceManager == null) {\n            this.mReactInstanceManager = this.createReactInstanceManager();\n        }\n\n        return this.mReactInstanceManager;\n    }\n\nprotected ReactInstanceManager createReactInstanceManager() {\n        Builder builder = ReactInstanceManager.builder().setApplication(this.mApplication).setJSMainModuleName(this.getJSMainModuleName()).setUseDeveloperSupport(this.getUseDeveloperSupport()).setRedBoxHandler(this.getRedBoxHandler()).setUIImplementationProvider(this.getUIImplementationProvider()).setInitialLifecycleState(LifecycleState.BEFORE_CREATE);\n        Iterator jsBundleFile = this.getPackages().iterator();\n\n        while(jsBundleFile.hasNext()) {\n            ReactPackage reactPackage = (ReactPackage)jsBundleFile.next();\n            builder.addPackage(reactPackage);\n        }\n\n        String jsBundleFile1 = this.getJSBundleFile();\n        if(jsBundleFile1 != null) {\n            builder.setJSBundleFile(jsBundleFile1);\n        } else {\n            builder.setBundleAssetName((String)Assertions.assertNotNull(this.getBundleAssetName()));\n        }\n\n        return builder.build();\n    }\n```\n可以发现,ReactNativeHost中的ReactInstanceManager只在创建时读取bundle路径等信息.也就约等于一个ReactNativeHost对应一个bundle入口文件.这就是为什么我们以维护一个<bundlePath,ReactNativeHost>映射map的方式来实现native app中多个RN模块的切换.\n\n继续来看看创建React上下文环境的实现逻辑(XReactInstanceManagerImpl.java):\n\n```\npublic void createReactContextInBackground() {\n        Assertions.assertCondition(!this.mHasStartedCreatingInitialContext, \"createReactContextInBackground should only be called when creating the react application for the first time. When reloading JS, e.g. from a new file, explicitlyuse recreateReactContextInBackground\");\n        this.mHasStartedCreatingInitialContext = true;\n        this.recreateReactContextInBackgroundInner();\n    }\nprivate void recreateReactContextInBackgroundInner() {\n        UiThreadUtil.assertOnUiThread();\n        if(this.mUseDeveloperSupport && this.mJSMainModuleName != null) {\n            final DeveloperSettings devSettings = this.mDevSupportManager.getDevSettings();\n            if(this.mDevSupportManager.hasUpToDateJSBundleInCache() && !devSettings.isRemoteJSDebugEnabled()) {\n                this.onJSBundleLoadedFromServer();\n            } else if(this.mBundleLoader == null) {\n                this.mDevSupportManager.handleReloadJS();\n            } else {\n                this.mDevSupportManager.isPackagerRunning(new PackagerStatusCallback() {\n                    public void onPackagerStatusFetched(final boolean packagerIsRunning) {\n                        UiThreadUtil.runOnUiThread(new Runnable() {\n                            public void run() {\n                                if(packagerIsRunning) {\n                                    XReactInstanceManagerImpl.this.mDevSupportManager.handleReloadJS();\n                                } else {\n                                    devSettings.setRemoteJSDebugEnabled(false);\n                                    XReactInstanceManagerImpl.this.recreateReactContextInBackgroundFromBundleLoader();\n                                }\n\n                            }\n                        });\n                    }\n                });\n            }\n\n        } else {\n            this.recreateReactContextInBackgroundFromBundleLoader();\n        }\n    }\n```\n第二个if块的关键代码就分析到这.\n\n----\n最后一句是调试模式下,注册一个DoubleTapReloadRecognizer,按两下R键重新加载bundle.处理逻辑是在DevSupportManager(通过DevSupportManagerFactory.create创建)的handleReloadJS方法中处理的.最终实现逻辑(XReactInstanceManagerImpl.java):\n\n```\nprivate void recreateReactContextInBackground(com.facebook.react.cxxbridge.JavaScriptExecutor.Factory jsExecutorFactory, JSBundleLoader jsBundleLoader) {\n        UiThreadUtil.assertOnUiThread();\n        XReactInstanceManagerImpl.ReactContextInitParams initParams = new XReactInstanceManagerImpl.ReactContextInitParams(jsExecutorFactory, jsBundleLoader);\n        if(this.mReactContextInitAsyncTask == null) {\n            this.mReactContextInitAsyncTask = new XReactInstanceManagerImpl.ReactContextInitAsyncTask(null);\n            this.mReactContextInitAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new XReactInstanceManagerImpl.ReactContextInitParams[]{initParams});\n        } else {\n            this.mPendingReactContextInitParams = initParams;\n        }\n\n    }\n```\n\n# bundle管理\n![](http://bdapp.org/static/bundleManage.png)\n\n主要根据以上流程实现即可,同时要兼具安全性考量.验证文件安全性.\n\n \n\n\n","source":"_posts/React-Native-for-Android-with-multi-RNApp.md","raw":"---\ntitle: Android多个React-Native模块的实现及源码解读\ndate: 2016-11-16 15:31:14\ntags: react-native\n---\n这里我们废话不多说,只围绕主题讲一些技术方面的干货.(本文基于React-Native0.36.0版本)\n\n我们之所以在native app中引入react-native(以下简称RN)框架,是为了将native app中的一些不确定的UI布局,逻辑,业务,流程等等因素,交由远端来控制.也就是说,RN的bundle文件都是由远端下发,然而我们为了最优化展现RN页面,往往都会提前下载好所需要的bundle文件以节省网络交互时间.所以这篇博客我们是基于RN各模块(ComponentName)所对应的JS bundle文件已经下载到本地目标文件夹的前提下来写的.关于bundle文件的版本管理等我们在文末会详细介绍.\n\n# ReactNativeHost\n我们将RN库引入工程之后,第一件事情就是改造Application类.我们需要在自己的Application中实现一个接口----ReactApplication\n\n```\npublic interface ReactApplication {\n    ReactNativeHost getReactNativeHost();\n}\n```\n这个接口中只有一个方法,而ReactNativeHost是一个抽象类,其中有两个抽象方法需要实现(一会将提到).这个方法返回ReactNativeHost对象,这个对象里面可以指定RN的调试模式,以及native给JS暴露的一些通信模块,同时还可以指定当前上下文加载的bundle文件路径.为了达到多个RN模块的切换,我们在Application中维护了一个<bundlePath,ReactNativeHost>的map(为什么这么做?紧接着会介绍):\n\n`private HashMap<String, ReactNativeHost> mReactHostMap = MapBuilder.newHashMap();`\n\n来看看我们是怎么实现上面的接口以及如何维护这个map的:\n\n```\npublic String gReactNativeBundlePath = \"myBundlePath...\";\n\n@Override\n    public ReactNativeHost getReactNativeHost() {\n        synchronized (gReactNativeBundlePath) {\n            if (!mReactHostMap.containsKey(gReactNativeBundlePath)) {\n                ReactNativeHost host = new ReactNativeHost(this) {\n                    @Override\n                    protected boolean getUseDeveloperSupport() {\n                        return BuildConfig.REACT_DEBUG;\n                    }\n\n                    @Override\n                    protected List<ReactPackage> getPackages() {\n                        return Arrays.asList(new MainReactPackage(), new CustomReactPackage());\n                    }\n\n                    @Override\n                    protected String getJSBundleFile() {\n                        return gReactNativeBundlePath;\n                    }\n                };\n                mReactHostMap.put(gReactNativeBundlePath, host);\n            }\n            return mReactHostMap.get(gReactNativeBundlePath);\n        }\n    }\n```\n先来看看我们创建的ReactNativeHost的实现:\n\n* getUseDeveloperSupport \n\n\t抽象方法,用来控制RN调试开关的,一般直接复用BuildConfig.DEBUG开关就行,如果有冲突就自行新建一个buildConfigField(如这里的BuildConfig.REACT_DEBUG).\n* getPackages\n\n\t用于指定JS和native通信的ReactPackage,在ReactPackage中可以指定native和JS通信的一些module.其中MainReactPackage是RN已经封装好一些native module和view manager等.\n* getJSBundleFile\n\n\t用于ReactNativeHost创建ReactInstanceManager时指定对应的本地JS bundle文件路径.如果返回null,则从getBundleAssetName接口取assets中的对应文件(一般仅用于调试).\n\n接下来我们看看为什么要用维护<bundlePath,ReactNativeHost>映射map的方式来实现多个RN模块的切换.\n\n# ReactActivity\n\n当RN页面构建的时候,RN提供了ReactActivity组件来展示页面.值得一提的是,ReactActivity是一个抽象类,但是此类中没有抽象方法,像getMainComponentName这样需要子类中实现的方法却没有加抽象标识,这应该是facebook的RN团队疏忽了.在ReactActivity类中,可以看到以下代码:\n\n```\nprivate final ReactActivityDelegate mDelegate = this.createReactActivityDelegate();\n\nprotected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        this.mDelegate.onCreate(savedInstanceState);\n    }\n```\n这里createReactActivityDelegate时,会将ReactActivity中指定的RN模块名(即getMainComponentName)传入ReactActivityDelegate,紧接着是调用ReactActivityDelegate对应的生命周期onCreate,来看看里面都做了些什么:\n\n```\nprotected void onCreate(Bundle savedInstanceState) {\n        if(this.getReactNativeHost().getUseDeveloperSupport() && VERSION.SDK_INT >= 23 && !Settings.canDrawOverlays(this.getContext())) {\n            Intent serviceIntent = new Intent(\"android.settings.action.MANAGE_OVERLAY_PERMISSION\");\n            this.getContext().startActivity(serviceIntent);\n            FLog.w(\"React\", \"Overlay permissions needs to be granted in order for react native apps to run in dev mode\");\n            Toast.makeText(this.getContext(), \"Overlay permissions needs to be granted in order for react native apps to run in dev mode\", 1).show();\n        }\n\n        if(this.mMainComponentName != null) {\n            this.loadApp(this.mMainComponentName);\n        }\n\n        this.mDoubleTapReloadRecognizer = new DoubleTapReloadRecognizer();\n    }\n```\n----\n第一个if块中的代码很简单,就是当RN在调试模式下,针对系统在SDK23以上创建RN调试悬浮窗的权限判断,没有权限则请求用户授权.Android官方文档:\n\t\n```\nNote: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests\n the user's approval by sending an intent with action \nACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling\n\nSettings.canDrawOverlays().\n```\n----\n第二个if块是最关键的.通过ReactActivityDelegate来loadApp,这也是最耗时的操作,展现RN页面慢/白屏的根源.这里主要是创建ReactRootView以及初始化React上下文环境.\n\n```\nprotected void loadApp(String appKey) {\n        if(this.mReactRootView != null) {\n            throw new IllegalStateException(\"Cannot loadApp while app is already running.\");\n        } else {\n            this.mReactRootView = this.createRootView();\n            this.mReactRootView.startReactApplication(this.getReactNativeHost().getReactInstanceManager(), appKey, this.getLaunchOptions());\n            this.getPlainActivity().setContentView(this.mReactRootView);\n        }\n    }\n```\n如何优化RN的性能和展现效率,主要就是针对这一个耗时方法进行优化即可.可以对ReactRootView进行缓存管理以及将创建React上下文环境提前预处理.\n我们来看看上面的遗留问题----为什么要用维护<bundlePath,ReactNativeHost>映射map的方式来实现多个RN模块的切换.在启动RN应用时startReactApplication需要传入ReactNativeHost中的ReactInstanceManager对象,我们来看看源码(ReactNativeHost.java):\n\n```\npublic ReactInstanceManager getReactInstanceManager() {\n        if(this.mReactInstanceManager == null) {\n            this.mReactInstanceManager = this.createReactInstanceManager();\n        }\n\n        return this.mReactInstanceManager;\n    }\n\nprotected ReactInstanceManager createReactInstanceManager() {\n        Builder builder = ReactInstanceManager.builder().setApplication(this.mApplication).setJSMainModuleName(this.getJSMainModuleName()).setUseDeveloperSupport(this.getUseDeveloperSupport()).setRedBoxHandler(this.getRedBoxHandler()).setUIImplementationProvider(this.getUIImplementationProvider()).setInitialLifecycleState(LifecycleState.BEFORE_CREATE);\n        Iterator jsBundleFile = this.getPackages().iterator();\n\n        while(jsBundleFile.hasNext()) {\n            ReactPackage reactPackage = (ReactPackage)jsBundleFile.next();\n            builder.addPackage(reactPackage);\n        }\n\n        String jsBundleFile1 = this.getJSBundleFile();\n        if(jsBundleFile1 != null) {\n            builder.setJSBundleFile(jsBundleFile1);\n        } else {\n            builder.setBundleAssetName((String)Assertions.assertNotNull(this.getBundleAssetName()));\n        }\n\n        return builder.build();\n    }\n```\n可以发现,ReactNativeHost中的ReactInstanceManager只在创建时读取bundle路径等信息.也就约等于一个ReactNativeHost对应一个bundle入口文件.这就是为什么我们以维护一个<bundlePath,ReactNativeHost>映射map的方式来实现native app中多个RN模块的切换.\n\n继续来看看创建React上下文环境的实现逻辑(XReactInstanceManagerImpl.java):\n\n```\npublic void createReactContextInBackground() {\n        Assertions.assertCondition(!this.mHasStartedCreatingInitialContext, \"createReactContextInBackground should only be called when creating the react application for the first time. When reloading JS, e.g. from a new file, explicitlyuse recreateReactContextInBackground\");\n        this.mHasStartedCreatingInitialContext = true;\n        this.recreateReactContextInBackgroundInner();\n    }\nprivate void recreateReactContextInBackgroundInner() {\n        UiThreadUtil.assertOnUiThread();\n        if(this.mUseDeveloperSupport && this.mJSMainModuleName != null) {\n            final DeveloperSettings devSettings = this.mDevSupportManager.getDevSettings();\n            if(this.mDevSupportManager.hasUpToDateJSBundleInCache() && !devSettings.isRemoteJSDebugEnabled()) {\n                this.onJSBundleLoadedFromServer();\n            } else if(this.mBundleLoader == null) {\n                this.mDevSupportManager.handleReloadJS();\n            } else {\n                this.mDevSupportManager.isPackagerRunning(new PackagerStatusCallback() {\n                    public void onPackagerStatusFetched(final boolean packagerIsRunning) {\n                        UiThreadUtil.runOnUiThread(new Runnable() {\n                            public void run() {\n                                if(packagerIsRunning) {\n                                    XReactInstanceManagerImpl.this.mDevSupportManager.handleReloadJS();\n                                } else {\n                                    devSettings.setRemoteJSDebugEnabled(false);\n                                    XReactInstanceManagerImpl.this.recreateReactContextInBackgroundFromBundleLoader();\n                                }\n\n                            }\n                        });\n                    }\n                });\n            }\n\n        } else {\n            this.recreateReactContextInBackgroundFromBundleLoader();\n        }\n    }\n```\n第二个if块的关键代码就分析到这.\n\n----\n最后一句是调试模式下,注册一个DoubleTapReloadRecognizer,按两下R键重新加载bundle.处理逻辑是在DevSupportManager(通过DevSupportManagerFactory.create创建)的handleReloadJS方法中处理的.最终实现逻辑(XReactInstanceManagerImpl.java):\n\n```\nprivate void recreateReactContextInBackground(com.facebook.react.cxxbridge.JavaScriptExecutor.Factory jsExecutorFactory, JSBundleLoader jsBundleLoader) {\n        UiThreadUtil.assertOnUiThread();\n        XReactInstanceManagerImpl.ReactContextInitParams initParams = new XReactInstanceManagerImpl.ReactContextInitParams(jsExecutorFactory, jsBundleLoader);\n        if(this.mReactContextInitAsyncTask == null) {\n            this.mReactContextInitAsyncTask = new XReactInstanceManagerImpl.ReactContextInitAsyncTask(null);\n            this.mReactContextInitAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new XReactInstanceManagerImpl.ReactContextInitParams[]{initParams});\n        } else {\n            this.mPendingReactContextInitParams = initParams;\n        }\n\n    }\n```\n\n# bundle管理\n![](http://bdapp.org/static/bundleManage.png)\n\n主要根据以上流程实现即可,同时要兼具安全性考量.验证文件安全性.\n\n \n\n\n","slug":"React-Native-for-Android-with-multi-RNApp","published":1,"updated":"2016-12-05T06:49:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix5uii5s0002yuxqv8czyyan","content":"<p>这里我们废话不多说,只围绕主题讲一些技术方面的干货.(本文基于React-Native0.36.0版本)</p>\n<p>我们之所以在native app中引入react-native(以下简称RN)框架,是为了将native app中的一些不确定的UI布局,逻辑,业务,流程等等因素,交由远端来控制.也就是说,RN的bundle文件都是由远端下发,然而我们为了最优化展现RN页面,往往都会提前下载好所需要的bundle文件以节省网络交互时间.所以这篇博客我们是基于RN各模块(ComponentName)所对应的JS bundle文件已经下载到本地目标文件夹的前提下来写的.关于bundle文件的版本管理等我们在文末会详细介绍.</p>\n<h1 id=\"ReactNativeHost\"><a href=\"#ReactNativeHost\" class=\"headerlink\" title=\"ReactNativeHost\"></a>ReactNativeHost</h1><p>我们将RN库引入工程之后,第一件事情就是改造Application类.我们需要在自己的Application中实现一个接口—-ReactApplication</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ReactApplication &#123;</div><div class=\"line\">    ReactNativeHost getReactNativeHost();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个接口中只有一个方法,而ReactNativeHost是一个抽象类,其中有两个抽象方法需要实现(一会将提到).这个方法返回ReactNativeHost对象,这个对象里面可以指定RN的调试模式,以及native给JS暴露的一些通信模块,同时还可以指定当前上下文加载的bundle文件路径.为了达到多个RN模块的切换,我们在Application中维护了一个<bundlepath,reactnativehost>的map(为什么这么做?紧接着会介绍):</bundlepath,reactnativehost></p>\n<p><code>private HashMap&lt;String, ReactNativeHost&gt; mReactHostMap = MapBuilder.newHashMap();</code></p>\n<p>来看看我们是怎么实现上面的接口以及如何维护这个map的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String gReactNativeBundlePath = &quot;myBundlePath...&quot;;</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">    public ReactNativeHost getReactNativeHost() &#123;</div><div class=\"line\">        synchronized (gReactNativeBundlePath) &#123;</div><div class=\"line\">            if (!mReactHostMap.containsKey(gReactNativeBundlePath)) &#123;</div><div class=\"line\">                ReactNativeHost host = new ReactNativeHost(this) &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    protected boolean getUseDeveloperSupport() &#123;</div><div class=\"line\">                        return BuildConfig.REACT_DEBUG;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class=\"line\">                        return Arrays.asList(new MainReactPackage(), new CustomReactPackage());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    protected String getJSBundleFile() &#123;</div><div class=\"line\">                        return gReactNativeBundlePath;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;;</div><div class=\"line\">                mReactHostMap.put(gReactNativeBundlePath, host);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return mReactHostMap.get(gReactNativeBundlePath);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>先来看看我们创建的ReactNativeHost的实现:</p>\n<ul>\n<li><p>getUseDeveloperSupport </p>\n<p>  抽象方法,用来控制RN调试开关的,一般直接复用BuildConfig.DEBUG开关就行,如果有冲突就自行新建一个buildConfigField(如这里的BuildConfig.REACT_DEBUG).</p>\n</li>\n<li><p>getPackages</p>\n<p>  用于指定JS和native通信的ReactPackage,在ReactPackage中可以指定native和JS通信的一些module.其中MainReactPackage是RN已经封装好一些native module和view manager等.</p>\n</li>\n<li><p>getJSBundleFile</p>\n<p>  用于ReactNativeHost创建ReactInstanceManager时指定对应的本地JS bundle文件路径.如果返回null,则从getBundleAssetName接口取assets中的对应文件(一般仅用于调试).</p>\n</li>\n</ul>\n<p>接下来我们看看为什么要用维护<bundlepath,reactnativehost>映射map的方式来实现多个RN模块的切换.</bundlepath,reactnativehost></p>\n<h1 id=\"ReactActivity\"><a href=\"#ReactActivity\" class=\"headerlink\" title=\"ReactActivity\"></a>ReactActivity</h1><p>当RN页面构建的时候,RN提供了ReactActivity组件来展示页面.值得一提的是,ReactActivity是一个抽象类,但是此类中没有抽象方法,像getMainComponentName这样需要子类中实现的方法却没有加抽象标识,这应该是facebook的RN团队疏忽了.在ReactActivity类中,可以看到以下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final ReactActivityDelegate mDelegate = this.createReactActivityDelegate();</div><div class=\"line\"></div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        this.mDelegate.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里createReactActivityDelegate时,会将ReactActivity中指定的RN模块名(即getMainComponentName)传入ReactActivityDelegate,紧接着是调用ReactActivityDelegate对应的生命周期onCreate,来看看里面都做了些什么:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        if(this.getReactNativeHost().getUseDeveloperSupport() &amp;&amp; VERSION.SDK_INT &gt;= 23 &amp;&amp; !Settings.canDrawOverlays(this.getContext())) &#123;</div><div class=\"line\">            Intent serviceIntent = new Intent(&quot;android.settings.action.MANAGE_OVERLAY_PERMISSION&quot;);</div><div class=\"line\">            this.getContext().startActivity(serviceIntent);</div><div class=\"line\">            FLog.w(&quot;React&quot;, &quot;Overlay permissions needs to be granted in order for react native apps to run in dev mode&quot;);</div><div class=\"line\">            Toast.makeText(this.getContext(), &quot;Overlay permissions needs to be granted in order for react native apps to run in dev mode&quot;, 1).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if(this.mMainComponentName != null) &#123;</div><div class=\"line\">            this.loadApp(this.mMainComponentName);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        this.mDoubleTapReloadRecognizer = new DoubleTapReloadRecognizer();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>第一个if块中的代码很简单,就是当RN在调试模式下,针对系统在SDK23以上创建RN调试悬浮窗的权限判断,没有权限则请求用户授权.Android官方文档:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Note: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests</div><div class=\"line\"> the user&apos;s approval by sending an intent with action </div><div class=\"line\">ACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling</div><div class=\"line\"></div><div class=\"line\">Settings.canDrawOverlays().</div></pre></td></tr></table></figure>\n<hr>\n<p>第二个if块是最关键的.通过ReactActivityDelegate来loadApp,这也是最耗时的操作,展现RN页面慢/白屏的根源.这里主要是创建ReactRootView以及初始化React上下文环境.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected void loadApp(String appKey) &#123;</div><div class=\"line\">        if(this.mReactRootView != null) &#123;</div><div class=\"line\">            throw new IllegalStateException(&quot;Cannot loadApp while app is already running.&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.mReactRootView = this.createRootView();</div><div class=\"line\">            this.mReactRootView.startReactApplication(this.getReactNativeHost().getReactInstanceManager(), appKey, this.getLaunchOptions());</div><div class=\"line\">            this.getPlainActivity().setContentView(this.mReactRootView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如何优化RN的性能和展现效率,主要就是针对这一个耗时方法进行优化即可.可以对ReactRootView进行缓存管理以及将创建React上下文环境提前预处理.<br>我们来看看上面的遗留问题—-为什么要用维护<bundlepath,reactnativehost>映射map的方式来实现多个RN模块的切换.在启动RN应用时startReactApplication需要传入ReactNativeHost中的ReactInstanceManager对象,我们来看看源码(ReactNativeHost.java):</bundlepath,reactnativehost></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ReactInstanceManager getReactInstanceManager() &#123;</div><div class=\"line\">        if(this.mReactInstanceManager == null) &#123;</div><div class=\"line\">            this.mReactInstanceManager = this.createReactInstanceManager();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return this.mReactInstanceManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">protected ReactInstanceManager createReactInstanceManager() &#123;</div><div class=\"line\">        Builder builder = ReactInstanceManager.builder().setApplication(this.mApplication).setJSMainModuleName(this.getJSMainModuleName()).setUseDeveloperSupport(this.getUseDeveloperSupport()).setRedBoxHandler(this.getRedBoxHandler()).setUIImplementationProvider(this.getUIImplementationProvider()).setInitialLifecycleState(LifecycleState.BEFORE_CREATE);</div><div class=\"line\">        Iterator jsBundleFile = this.getPackages().iterator();</div><div class=\"line\"></div><div class=\"line\">        while(jsBundleFile.hasNext()) &#123;</div><div class=\"line\">            ReactPackage reactPackage = (ReactPackage)jsBundleFile.next();</div><div class=\"line\">            builder.addPackage(reactPackage);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        String jsBundleFile1 = this.getJSBundleFile();</div><div class=\"line\">        if(jsBundleFile1 != null) &#123;</div><div class=\"line\">            builder.setJSBundleFile(jsBundleFile1);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            builder.setBundleAssetName((String)Assertions.assertNotNull(this.getBundleAssetName()));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return builder.build();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以发现,ReactNativeHost中的ReactInstanceManager只在创建时读取bundle路径等信息.也就约等于一个ReactNativeHost对应一个bundle入口文件.这就是为什么我们以维护一个<bundlepath,reactnativehost>映射map的方式来实现native app中多个RN模块的切换.</bundlepath,reactnativehost></p>\n<p>继续来看看创建React上下文环境的实现逻辑(XReactInstanceManagerImpl.java):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void createReactContextInBackground() &#123;</div><div class=\"line\">        Assertions.assertCondition(!this.mHasStartedCreatingInitialContext, &quot;createReactContextInBackground should only be called when creating the react application for the first time. When reloading JS, e.g. from a new file, explicitlyuse recreateReactContextInBackground&quot;);</div><div class=\"line\">        this.mHasStartedCreatingInitialContext = true;</div><div class=\"line\">        this.recreateReactContextInBackgroundInner();</div><div class=\"line\">    &#125;</div><div class=\"line\">private void recreateReactContextInBackgroundInner() &#123;</div><div class=\"line\">        UiThreadUtil.assertOnUiThread();</div><div class=\"line\">        if(this.mUseDeveloperSupport &amp;&amp; this.mJSMainModuleName != null) &#123;</div><div class=\"line\">            final DeveloperSettings devSettings = this.mDevSupportManager.getDevSettings();</div><div class=\"line\">            if(this.mDevSupportManager.hasUpToDateJSBundleInCache() &amp;&amp; !devSettings.isRemoteJSDebugEnabled()) &#123;</div><div class=\"line\">                this.onJSBundleLoadedFromServer();</div><div class=\"line\">            &#125; else if(this.mBundleLoader == null) &#123;</div><div class=\"line\">                this.mDevSupportManager.handleReloadJS();</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                this.mDevSupportManager.isPackagerRunning(new PackagerStatusCallback() &#123;</div><div class=\"line\">                    public void onPackagerStatusFetched(final boolean packagerIsRunning) &#123;</div><div class=\"line\">                        UiThreadUtil.runOnUiThread(new Runnable() &#123;</div><div class=\"line\">                            public void run() &#123;</div><div class=\"line\">                                if(packagerIsRunning) &#123;</div><div class=\"line\">                                    XReactInstanceManagerImpl.this.mDevSupportManager.handleReloadJS();</div><div class=\"line\">                                &#125; else &#123;</div><div class=\"line\">                                    devSettings.setRemoteJSDebugEnabled(false);</div><div class=\"line\">                                    XReactInstanceManagerImpl.this.recreateReactContextInBackgroundFromBundleLoader();</div><div class=\"line\">                                &#125;</div><div class=\"line\"></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.recreateReactContextInBackgroundFromBundleLoader();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>第二个if块的关键代码就分析到这.</p>\n<hr>\n<p>最后一句是调试模式下,注册一个DoubleTapReloadRecognizer,按两下R键重新加载bundle.处理逻辑是在DevSupportManager(通过DevSupportManagerFactory.create创建)的handleReloadJS方法中处理的.最终实现逻辑(XReactInstanceManagerImpl.java):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void recreateReactContextInBackground(com.facebook.react.cxxbridge.JavaScriptExecutor.Factory jsExecutorFactory, JSBundleLoader jsBundleLoader) &#123;</div><div class=\"line\">        UiThreadUtil.assertOnUiThread();</div><div class=\"line\">        XReactInstanceManagerImpl.ReactContextInitParams initParams = new XReactInstanceManagerImpl.ReactContextInitParams(jsExecutorFactory, jsBundleLoader);</div><div class=\"line\">        if(this.mReactContextInitAsyncTask == null) &#123;</div><div class=\"line\">            this.mReactContextInitAsyncTask = new XReactInstanceManagerImpl.ReactContextInitAsyncTask(null);</div><div class=\"line\">            this.mReactContextInitAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new XReactInstanceManagerImpl.ReactContextInitParams[]&#123;initParams&#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.mPendingReactContextInitParams = initParams;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"bundle管理\"><a href=\"#bundle管理\" class=\"headerlink\" title=\"bundle管理\"></a>bundle管理</h1><p><img src=\"http://bdapp.org/static/bundleManage.png\" alt=\"\"></p>\n<p>主要根据以上流程实现即可,同时要兼具安全性考量.验证文件安全性.</p>\n","excerpt":"","more":"<p>这里我们废话不多说,只围绕主题讲一些技术方面的干货.(本文基于React-Native0.36.0版本)</p>\n<p>我们之所以在native app中引入react-native(以下简称RN)框架,是为了将native app中的一些不确定的UI布局,逻辑,业务,流程等等因素,交由远端来控制.也就是说,RN的bundle文件都是由远端下发,然而我们为了最优化展现RN页面,往往都会提前下载好所需要的bundle文件以节省网络交互时间.所以这篇博客我们是基于RN各模块(ComponentName)所对应的JS bundle文件已经下载到本地目标文件夹的前提下来写的.关于bundle文件的版本管理等我们在文末会详细介绍.</p>\n<h1 id=\"ReactNativeHost\"><a href=\"#ReactNativeHost\" class=\"headerlink\" title=\"ReactNativeHost\"></a>ReactNativeHost</h1><p>我们将RN库引入工程之后,第一件事情就是改造Application类.我们需要在自己的Application中实现一个接口—-ReactApplication</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ReactApplication &#123;</div><div class=\"line\">    ReactNativeHost getReactNativeHost();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个接口中只有一个方法,而ReactNativeHost是一个抽象类,其中有两个抽象方法需要实现(一会将提到).这个方法返回ReactNativeHost对象,这个对象里面可以指定RN的调试模式,以及native给JS暴露的一些通信模块,同时还可以指定当前上下文加载的bundle文件路径.为了达到多个RN模块的切换,我们在Application中维护了一个<bundlePath,ReactNativeHost>的map(为什么这么做?紧接着会介绍):</p>\n<p><code>private HashMap&lt;String, ReactNativeHost&gt; mReactHostMap = MapBuilder.newHashMap();</code></p>\n<p>来看看我们是怎么实现上面的接口以及如何维护这个map的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String gReactNativeBundlePath = &quot;myBundlePath...&quot;;</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">    public ReactNativeHost getReactNativeHost() &#123;</div><div class=\"line\">        synchronized (gReactNativeBundlePath) &#123;</div><div class=\"line\">            if (!mReactHostMap.containsKey(gReactNativeBundlePath)) &#123;</div><div class=\"line\">                ReactNativeHost host = new ReactNativeHost(this) &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    protected boolean getUseDeveloperSupport() &#123;</div><div class=\"line\">                        return BuildConfig.REACT_DEBUG;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class=\"line\">                        return Arrays.asList(new MainReactPackage(), new CustomReactPackage());</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    protected String getJSBundleFile() &#123;</div><div class=\"line\">                        return gReactNativeBundlePath;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;;</div><div class=\"line\">                mReactHostMap.put(gReactNativeBundlePath, host);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return mReactHostMap.get(gReactNativeBundlePath);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>先来看看我们创建的ReactNativeHost的实现:</p>\n<ul>\n<li><p>getUseDeveloperSupport </p>\n<p>  抽象方法,用来控制RN调试开关的,一般直接复用BuildConfig.DEBUG开关就行,如果有冲突就自行新建一个buildConfigField(如这里的BuildConfig.REACT_DEBUG).</p>\n</li>\n<li><p>getPackages</p>\n<p>  用于指定JS和native通信的ReactPackage,在ReactPackage中可以指定native和JS通信的一些module.其中MainReactPackage是RN已经封装好一些native module和view manager等.</p>\n</li>\n<li><p>getJSBundleFile</p>\n<p>  用于ReactNativeHost创建ReactInstanceManager时指定对应的本地JS bundle文件路径.如果返回null,则从getBundleAssetName接口取assets中的对应文件(一般仅用于调试).</p>\n</li>\n</ul>\n<p>接下来我们看看为什么要用维护<bundlePath,ReactNativeHost>映射map的方式来实现多个RN模块的切换.</p>\n<h1 id=\"ReactActivity\"><a href=\"#ReactActivity\" class=\"headerlink\" title=\"ReactActivity\"></a>ReactActivity</h1><p>当RN页面构建的时候,RN提供了ReactActivity组件来展示页面.值得一提的是,ReactActivity是一个抽象类,但是此类中没有抽象方法,像getMainComponentName这样需要子类中实现的方法却没有加抽象标识,这应该是facebook的RN团队疏忽了.在ReactActivity类中,可以看到以下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final ReactActivityDelegate mDelegate = this.createReactActivityDelegate();</div><div class=\"line\"></div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        this.mDelegate.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里createReactActivityDelegate时,会将ReactActivity中指定的RN模块名(即getMainComponentName)传入ReactActivityDelegate,紧接着是调用ReactActivityDelegate对应的生命周期onCreate,来看看里面都做了些什么:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        if(this.getReactNativeHost().getUseDeveloperSupport() &amp;&amp; VERSION.SDK_INT &gt;= 23 &amp;&amp; !Settings.canDrawOverlays(this.getContext())) &#123;</div><div class=\"line\">            Intent serviceIntent = new Intent(&quot;android.settings.action.MANAGE_OVERLAY_PERMISSION&quot;);</div><div class=\"line\">            this.getContext().startActivity(serviceIntent);</div><div class=\"line\">            FLog.w(&quot;React&quot;, &quot;Overlay permissions needs to be granted in order for react native apps to run in dev mode&quot;);</div><div class=\"line\">            Toast.makeText(this.getContext(), &quot;Overlay permissions needs to be granted in order for react native apps to run in dev mode&quot;, 1).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if(this.mMainComponentName != null) &#123;</div><div class=\"line\">            this.loadApp(this.mMainComponentName);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        this.mDoubleTapReloadRecognizer = new DoubleTapReloadRecognizer();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>第一个if块中的代码很简单,就是当RN在调试模式下,针对系统在SDK23以上创建RN调试悬浮窗的权限判断,没有权限则请求用户授权.Android官方文档:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Note: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests</div><div class=\"line\"> the user&apos;s approval by sending an intent with action </div><div class=\"line\">ACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling</div><div class=\"line\"></div><div class=\"line\">Settings.canDrawOverlays().</div></pre></td></tr></table></figure>\n<hr>\n<p>第二个if块是最关键的.通过ReactActivityDelegate来loadApp,这也是最耗时的操作,展现RN页面慢/白屏的根源.这里主要是创建ReactRootView以及初始化React上下文环境.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected void loadApp(String appKey) &#123;</div><div class=\"line\">        if(this.mReactRootView != null) &#123;</div><div class=\"line\">            throw new IllegalStateException(&quot;Cannot loadApp while app is already running.&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.mReactRootView = this.createRootView();</div><div class=\"line\">            this.mReactRootView.startReactApplication(this.getReactNativeHost().getReactInstanceManager(), appKey, this.getLaunchOptions());</div><div class=\"line\">            this.getPlainActivity().setContentView(this.mReactRootView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如何优化RN的性能和展现效率,主要就是针对这一个耗时方法进行优化即可.可以对ReactRootView进行缓存管理以及将创建React上下文环境提前预处理.<br>我们来看看上面的遗留问题—-为什么要用维护<bundlePath,ReactNativeHost>映射map的方式来实现多个RN模块的切换.在启动RN应用时startReactApplication需要传入ReactNativeHost中的ReactInstanceManager对象,我们来看看源码(ReactNativeHost.java):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ReactInstanceManager getReactInstanceManager() &#123;</div><div class=\"line\">        if(this.mReactInstanceManager == null) &#123;</div><div class=\"line\">            this.mReactInstanceManager = this.createReactInstanceManager();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return this.mReactInstanceManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">protected ReactInstanceManager createReactInstanceManager() &#123;</div><div class=\"line\">        Builder builder = ReactInstanceManager.builder().setApplication(this.mApplication).setJSMainModuleName(this.getJSMainModuleName()).setUseDeveloperSupport(this.getUseDeveloperSupport()).setRedBoxHandler(this.getRedBoxHandler()).setUIImplementationProvider(this.getUIImplementationProvider()).setInitialLifecycleState(LifecycleState.BEFORE_CREATE);</div><div class=\"line\">        Iterator jsBundleFile = this.getPackages().iterator();</div><div class=\"line\"></div><div class=\"line\">        while(jsBundleFile.hasNext()) &#123;</div><div class=\"line\">            ReactPackage reactPackage = (ReactPackage)jsBundleFile.next();</div><div class=\"line\">            builder.addPackage(reactPackage);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        String jsBundleFile1 = this.getJSBundleFile();</div><div class=\"line\">        if(jsBundleFile1 != null) &#123;</div><div class=\"line\">            builder.setJSBundleFile(jsBundleFile1);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            builder.setBundleAssetName((String)Assertions.assertNotNull(this.getBundleAssetName()));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return builder.build();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以发现,ReactNativeHost中的ReactInstanceManager只在创建时读取bundle路径等信息.也就约等于一个ReactNativeHost对应一个bundle入口文件.这就是为什么我们以维护一个<bundlePath,ReactNativeHost>映射map的方式来实现native app中多个RN模块的切换.</p>\n<p>继续来看看创建React上下文环境的实现逻辑(XReactInstanceManagerImpl.java):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void createReactContextInBackground() &#123;</div><div class=\"line\">        Assertions.assertCondition(!this.mHasStartedCreatingInitialContext, &quot;createReactContextInBackground should only be called when creating the react application for the first time. When reloading JS, e.g. from a new file, explicitlyuse recreateReactContextInBackground&quot;);</div><div class=\"line\">        this.mHasStartedCreatingInitialContext = true;</div><div class=\"line\">        this.recreateReactContextInBackgroundInner();</div><div class=\"line\">    &#125;</div><div class=\"line\">private void recreateReactContextInBackgroundInner() &#123;</div><div class=\"line\">        UiThreadUtil.assertOnUiThread();</div><div class=\"line\">        if(this.mUseDeveloperSupport &amp;&amp; this.mJSMainModuleName != null) &#123;</div><div class=\"line\">            final DeveloperSettings devSettings = this.mDevSupportManager.getDevSettings();</div><div class=\"line\">            if(this.mDevSupportManager.hasUpToDateJSBundleInCache() &amp;&amp; !devSettings.isRemoteJSDebugEnabled()) &#123;</div><div class=\"line\">                this.onJSBundleLoadedFromServer();</div><div class=\"line\">            &#125; else if(this.mBundleLoader == null) &#123;</div><div class=\"line\">                this.mDevSupportManager.handleReloadJS();</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                this.mDevSupportManager.isPackagerRunning(new PackagerStatusCallback() &#123;</div><div class=\"line\">                    public void onPackagerStatusFetched(final boolean packagerIsRunning) &#123;</div><div class=\"line\">                        UiThreadUtil.runOnUiThread(new Runnable() &#123;</div><div class=\"line\">                            public void run() &#123;</div><div class=\"line\">                                if(packagerIsRunning) &#123;</div><div class=\"line\">                                    XReactInstanceManagerImpl.this.mDevSupportManager.handleReloadJS();</div><div class=\"line\">                                &#125; else &#123;</div><div class=\"line\">                                    devSettings.setRemoteJSDebugEnabled(false);</div><div class=\"line\">                                    XReactInstanceManagerImpl.this.recreateReactContextInBackgroundFromBundleLoader();</div><div class=\"line\">                                &#125;</div><div class=\"line\"></div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.recreateReactContextInBackgroundFromBundleLoader();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>第二个if块的关键代码就分析到这.</p>\n<hr>\n<p>最后一句是调试模式下,注册一个DoubleTapReloadRecognizer,按两下R键重新加载bundle.处理逻辑是在DevSupportManager(通过DevSupportManagerFactory.create创建)的handleReloadJS方法中处理的.最终实现逻辑(XReactInstanceManagerImpl.java):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void recreateReactContextInBackground(com.facebook.react.cxxbridge.JavaScriptExecutor.Factory jsExecutorFactory, JSBundleLoader jsBundleLoader) &#123;</div><div class=\"line\">        UiThreadUtil.assertOnUiThread();</div><div class=\"line\">        XReactInstanceManagerImpl.ReactContextInitParams initParams = new XReactInstanceManagerImpl.ReactContextInitParams(jsExecutorFactory, jsBundleLoader);</div><div class=\"line\">        if(this.mReactContextInitAsyncTask == null) &#123;</div><div class=\"line\">            this.mReactContextInitAsyncTask = new XReactInstanceManagerImpl.ReactContextInitAsyncTask(null);</div><div class=\"line\">            this.mReactContextInitAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, new XReactInstanceManagerImpl.ReactContextInitParams[]&#123;initParams&#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.mPendingReactContextInitParams = initParams;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"bundle管理\"><a href=\"#bundle管理\" class=\"headerlink\" title=\"bundle管理\"></a>bundle管理</h1><p><img src=\"http://bdapp.org/static/bundleManage.png\" alt=\"\"></p>\n<p>主要根据以上流程实现即可,同时要兼具安全性考量.验证文件安全性.</p>\n"},{"title":"调试Android UI性能","date":"2016-10-26T06:51:39.000Z","_content":"我们尽最大的努力来争取使UI组件的性能如丝般顺滑，但有的时候这根本不可能做到。要知道，Android有超过一万种不同型号的手机，而在框架底层进行软件渲染的时候是统一处理的，这意味着你没办法像iOS那样自由。不过有些时候，你还是可以想办法提升应用的性能（有的时候问题根本不是出在原生代码上！）\n\n要想解决应用的性能问题，第一步就是搞明白在每个16毫秒的帧中，时间都去哪儿了。为此，我们会使用一个标准的Android性能分析工具`systrace`，不过在此之前……\n\n> 请先确定JS的开发者模式已经关闭！\n>\n> 你应该在应用的日志里看到`__DEV__ === false, development-level warning are OFF, performance optimizations are ON`等字样（你可以通过adb logcat来查看应用日志）\n\n## 使用Systrace进行性能分析\n\nSystrace是一个标准的基于标记的Android性能分析工具（如果你安装了Android platform-tool包，它也会一同安装）。被调试的代码段在开始和结束处加上标记，在执行的过程中标记会被记录，最后会以图表形式展现统计结果。包括Android SDK自己和React Native框架都已经提供了标准的标记供你查看。\n\n### 收集一次数据\n\n> 注意:\n>\n> Systrace从React Native `v0.15`版本开始支持。你需要在此版本下构建项目才能收集相应的性能数据。\n\n首先，把你想分析的、运行不流畅的设备使用USB线链接到电脑上，然后操作应用来到你想分析的导航/动画之前，接着这样运行systrace：\n\n```\n$ <AndroidSDK所在目录>/platform-tools/systrace/systrace.py --time=10 -o trace.html sched gfx view -a <你的应用包名>\n```\n\n对于此命令做一个简单的说明：\n\n- `time`参数控制本次数据收集的持续时间，单位是秒。\n- `schd`, `gfx`, 和`view`是我们所关心的Android SDK内置的tag（标记的集合）：`schd`提供了你的设备的每个CPU核心正在做什么的信息，`gfx`提供了你的图形相关信息，譬如每帧的时间范围，而`view`提供了一些关于视图布局和渲染相关性能的信息。\n- `-a <你的应用包名>`启用了针对应用的过滤。在这里填写你用React Native创建的应用包名。`你的应用包名`可以在你应用中的`AndroidManifest.xml`里找到，形如`com.example.app`\n\n_译注_：实际上，AndroidManifest.xml里的应用包名会被`app/build.gradle`里的`applicationId`取代。如果二者不一致，应当以`app/build.gradle`里的为准。\n\n一旦systrace开始收集数据，你可以操作应用执行你所关心的动画和操作。在收集结束后，systrace会给你提供一个链接，你可以在浏览器中打开这个链接来查看数据收集的结果。\n\n## 查看性能数据\n\n在浏览器中打开数据页面（建议使用Chrome），你应该能看到类似这样的结果：\n\n![Example](http://reactnative.cn/static/docs/0.35/img/SystraceExample.png)\n\n**提示**: 你可以使用WSAD键来滚动和缩放性能数据图表。\n\n### 启用垂直同步高亮\n\n接下来你首先应该启用16毫秒帧区间的高亮。在屏幕顶端点击对应的复选框：\n\n![Enable VSync Highlighting](http://reactnative.cn/static/docs/0.35/img/SystraceHighlightVSync.png)\n\n然后你应该能在屏幕上看到类似上图的斑马状条纹。如果你无法看到这样的条纹，可以尝试换一台设备来进行分析：部分三星手机显示垂直同步高亮存在已知问题，而Nexus系列大部分情况都相当可靠。\n\n### 找到你的进程\n\n滚动图表直到你找到你的应用包名。在上面的例子里，我正在分析`com.facebook.adsmanager`，由于内核的线程名字长度限制，它会显示成`book.adsmanager`。\n\n在左侧，你应该能看到一系列线程对应着右边的时间轴。有3到4个线程是我们必须关注的：UI线程(名字可能是`UI Thread`或者是你的包名), `mqt_js`和`mqt_native_modules`。如果你在Android 5.0以上版本运行，我们还需要关注`Render`（渲染）线程。\n\n### UI 线程\n\n标准的Android布局和绘制都在UI线程里发生。右侧显示的线程名字会是你的包名(在我的例子里是book.adsmanager)或者UI Thread.你在这个线程里看到的事件可能会是一些`Choreographer`, `traversals`或者`DispatchUI`：\n\n![UI Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceUIThreadExample.png)\n\n### JS线程\n\n这是用于执行JavaScript代码的线程。根据Android系统版本或者设备的不同，线程名可能是`mqt_js`或者`<...>`。如果看不到对应的名字的话，寻找类似`JSCall`，`Bridge.executeJSCall`这样的事件。\n\n![JS Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceJSThreadExample.png)\n\n### 原生模块线程\n\n这里是用于原生模块执行代码(譬如`UIManager`)的线程，线程名可能是`mqt_native_modules`或`<...>`。在后一种情况下，寻找类似`NativeCall`, `CallJavaModuleMethod`, 还有`onBatchComplete`这样的事件名：\n\n![Native Modules Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceNativeModulesThreadExample.png)\n\n### 额外的：渲染线程\n\n如果你在使用Android L(5.0)或者更高版本，你应该还会在你的应用里看到一个渲染线程。这个线程真正生成OpenGL渲染序列来渲染你的UI。这个线程的名字可能为`RenderThread`或者`<...>`，在后一种情况下，寻找类似`DrawFrame`或`queueBuffer`这样的事件：\n\n![Render Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceRenderThreadExample.png)\n\n## 寻找导致卡顿的罪魁祸首\n\n一个流畅的动画应该看起来像这样：\n\n![Smooth Animation](http://reactnative.cn/static/docs/0.35/img/SystraceWellBehaved.png)\n\n每个背景颜色不同的部分我们称作“一帧”——记住要渲染一个流畅的帧，我们所有的界面工作都需要在16毫秒内完成。注意没有任何一个线程在靠近帧的边界处工作。类似这样的一个应用程序就正在60FPS(帧每秒)的情况下流畅表现。\n\n如果你发现一些起伏的地方，譬如这样：\n\n![Choppy Animation from JS](http://reactnative.cn/static/docs/0.35/img/SystraceBadJS.png)\n\n注意在上图中JS线程基本上一直在执行，并且超越了帧的边界。这个应用就没法以60FPS渲染了。在这种情况下，**问题出在JS中**。\n\n你还有可能会看到一些类似这样的东西：\n\n![Choppy Animation from UI](http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png)\n\n在这种情况下，UI和渲染线程有一些重负荷的工作，以至于超越了帧的边界。这可能是由于我们每帧试图渲染的UI太多了导致的。在这种情况下，**问题出在需要渲染的原生视图上**。\n\n并且，你还应该能看到一些可以指导接下来优化工作的有用的信息。\n\n## JS的问题\n\n如果你发现问题出在JS上，在你正在执行的JS代码中寻找线索。在上面的图中，我们会发现`RCTEventEmitter`每帧被执行了很多次。这是上面的数据统计放大后的内容：\n\n![Too much JS](http://reactnative.cn/static/docs/0.35/img/SystraceBadJS2.png)\n\n这看起来不是很正常，为什么事件被调用的如此频繁？它们是不同的事件吗？具体的答案取决于你的产品的代码。在许多情况下，你可能需要看看[shouldComponentUpdate](https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate)的介绍。\n\n> **TODO**: 我们还在准备更多的JS性能分析的工具，会在将来的版本中加入。\n\n## 原生UI问题\n\n如果你发现问题出在原生UI上，有两种常见的情况：\n\n1. 你每帧在渲染的UI给GPU带来了太重的负载，或者：\n2. 你在动画、交互的过程中不断创建新的UI对象（譬如在scroll的过程中加载新的内容）\n\n### GPU负担过重\n\n在第一种情况下，你应该能看到UI线程的图表类似这样：\n\n![Overloaded GPU](http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png)\n\n注意`DrawFrame`花费了很多时间，超越了帧的边界。这些时间用来等待GPU获取它的操作缓存。\n\n要缓解这个问题，你应该：\n\n- 检查`renderToHardwareTextureAndroid`的使用，有这个属性的View的子节点正在进行动画或变形会导致性能大幅下降(譬如`Navigator`提供的滑动、淡入淡出动画)。\n- 确保你**没有**使用`needsOffscreenAlphaCompositing`，这个默认是关闭的，因为它在大部分情况下都会带来GPU消耗的大幅提升。\n\n如果这还不能帮你解决问题，你可能需要更深入的探索GPU到底在做什么。参见[Tracer for OpenGL ES](http://developer.android.com/tools/help/gltracer.html)。\n\n### 在UI线程创建大量视图\n\n如果是第二种情况，你可能会看到类似这样的结果：\n\n![Creating Views](http://reactnative.cn/static/docs/0.35/img/SystraceBadCreateUI.png)\n\n注意一开始JS线程工作了很久，然后你看到原生模块线程干了些事情，最后带来了UI线程的巨大开销。\n\n这个问题并没有什么简单直接的优化办法，除非你能把创建UI的步骤推迟到交互结束以后去进行，或者你能直接简化你所要创建的UI。React Native小组正在架构层设法提供一个方案，使得新的UI视图可以在主线程之外去创建和配置，这样就可以使得交互变得更加流畅。\n\n## 还是没搞定？\n\n如果你还是很迷惑或者不知如何进展，你可以在[Stack Overflow的react-native标签下](http://stackoverflow.com/tags/react-native)提交一个问题。如果你在这里得不到响应，或者找到了一个核心组件的问题，你可以[提交一个Github issue](https://github.com/facebook/react-native/issues)。\n","source":"_posts/react-native-android-ui-performance.md","raw":"---\ntitle: 调试Android UI性能\ndate: 2016-10-26 14:51:39\ntags: react-native\n---\n我们尽最大的努力来争取使UI组件的性能如丝般顺滑，但有的时候这根本不可能做到。要知道，Android有超过一万种不同型号的手机，而在框架底层进行软件渲染的时候是统一处理的，这意味着你没办法像iOS那样自由。不过有些时候，你还是可以想办法提升应用的性能（有的时候问题根本不是出在原生代码上！）\n\n要想解决应用的性能问题，第一步就是搞明白在每个16毫秒的帧中，时间都去哪儿了。为此，我们会使用一个标准的Android性能分析工具`systrace`，不过在此之前……\n\n> 请先确定JS的开发者模式已经关闭！\n>\n> 你应该在应用的日志里看到`__DEV__ === false, development-level warning are OFF, performance optimizations are ON`等字样（你可以通过adb logcat来查看应用日志）\n\n## 使用Systrace进行性能分析\n\nSystrace是一个标准的基于标记的Android性能分析工具（如果你安装了Android platform-tool包，它也会一同安装）。被调试的代码段在开始和结束处加上标记，在执行的过程中标记会被记录，最后会以图表形式展现统计结果。包括Android SDK自己和React Native框架都已经提供了标准的标记供你查看。\n\n### 收集一次数据\n\n> 注意:\n>\n> Systrace从React Native `v0.15`版本开始支持。你需要在此版本下构建项目才能收集相应的性能数据。\n\n首先，把你想分析的、运行不流畅的设备使用USB线链接到电脑上，然后操作应用来到你想分析的导航/动画之前，接着这样运行systrace：\n\n```\n$ <AndroidSDK所在目录>/platform-tools/systrace/systrace.py --time=10 -o trace.html sched gfx view -a <你的应用包名>\n```\n\n对于此命令做一个简单的说明：\n\n- `time`参数控制本次数据收集的持续时间，单位是秒。\n- `schd`, `gfx`, 和`view`是我们所关心的Android SDK内置的tag（标记的集合）：`schd`提供了你的设备的每个CPU核心正在做什么的信息，`gfx`提供了你的图形相关信息，譬如每帧的时间范围，而`view`提供了一些关于视图布局和渲染相关性能的信息。\n- `-a <你的应用包名>`启用了针对应用的过滤。在这里填写你用React Native创建的应用包名。`你的应用包名`可以在你应用中的`AndroidManifest.xml`里找到，形如`com.example.app`\n\n_译注_：实际上，AndroidManifest.xml里的应用包名会被`app/build.gradle`里的`applicationId`取代。如果二者不一致，应当以`app/build.gradle`里的为准。\n\n一旦systrace开始收集数据，你可以操作应用执行你所关心的动画和操作。在收集结束后，systrace会给你提供一个链接，你可以在浏览器中打开这个链接来查看数据收集的结果。\n\n## 查看性能数据\n\n在浏览器中打开数据页面（建议使用Chrome），你应该能看到类似这样的结果：\n\n![Example](http://reactnative.cn/static/docs/0.35/img/SystraceExample.png)\n\n**提示**: 你可以使用WSAD键来滚动和缩放性能数据图表。\n\n### 启用垂直同步高亮\n\n接下来你首先应该启用16毫秒帧区间的高亮。在屏幕顶端点击对应的复选框：\n\n![Enable VSync Highlighting](http://reactnative.cn/static/docs/0.35/img/SystraceHighlightVSync.png)\n\n然后你应该能在屏幕上看到类似上图的斑马状条纹。如果你无法看到这样的条纹，可以尝试换一台设备来进行分析：部分三星手机显示垂直同步高亮存在已知问题，而Nexus系列大部分情况都相当可靠。\n\n### 找到你的进程\n\n滚动图表直到你找到你的应用包名。在上面的例子里，我正在分析`com.facebook.adsmanager`，由于内核的线程名字长度限制，它会显示成`book.adsmanager`。\n\n在左侧，你应该能看到一系列线程对应着右边的时间轴。有3到4个线程是我们必须关注的：UI线程(名字可能是`UI Thread`或者是你的包名), `mqt_js`和`mqt_native_modules`。如果你在Android 5.0以上版本运行，我们还需要关注`Render`（渲染）线程。\n\n### UI 线程\n\n标准的Android布局和绘制都在UI线程里发生。右侧显示的线程名字会是你的包名(在我的例子里是book.adsmanager)或者UI Thread.你在这个线程里看到的事件可能会是一些`Choreographer`, `traversals`或者`DispatchUI`：\n\n![UI Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceUIThreadExample.png)\n\n### JS线程\n\n这是用于执行JavaScript代码的线程。根据Android系统版本或者设备的不同，线程名可能是`mqt_js`或者`<...>`。如果看不到对应的名字的话，寻找类似`JSCall`，`Bridge.executeJSCall`这样的事件。\n\n![JS Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceJSThreadExample.png)\n\n### 原生模块线程\n\n这里是用于原生模块执行代码(譬如`UIManager`)的线程，线程名可能是`mqt_native_modules`或`<...>`。在后一种情况下，寻找类似`NativeCall`, `CallJavaModuleMethod`, 还有`onBatchComplete`这样的事件名：\n\n![Native Modules Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceNativeModulesThreadExample.png)\n\n### 额外的：渲染线程\n\n如果你在使用Android L(5.0)或者更高版本，你应该还会在你的应用里看到一个渲染线程。这个线程真正生成OpenGL渲染序列来渲染你的UI。这个线程的名字可能为`RenderThread`或者`<...>`，在后一种情况下，寻找类似`DrawFrame`或`queueBuffer`这样的事件：\n\n![Render Thread Example](http://reactnative.cn/static/docs/0.35/img/SystraceRenderThreadExample.png)\n\n## 寻找导致卡顿的罪魁祸首\n\n一个流畅的动画应该看起来像这样：\n\n![Smooth Animation](http://reactnative.cn/static/docs/0.35/img/SystraceWellBehaved.png)\n\n每个背景颜色不同的部分我们称作“一帧”——记住要渲染一个流畅的帧，我们所有的界面工作都需要在16毫秒内完成。注意没有任何一个线程在靠近帧的边界处工作。类似这样的一个应用程序就正在60FPS(帧每秒)的情况下流畅表现。\n\n如果你发现一些起伏的地方，譬如这样：\n\n![Choppy Animation from JS](http://reactnative.cn/static/docs/0.35/img/SystraceBadJS.png)\n\n注意在上图中JS线程基本上一直在执行，并且超越了帧的边界。这个应用就没法以60FPS渲染了。在这种情况下，**问题出在JS中**。\n\n你还有可能会看到一些类似这样的东西：\n\n![Choppy Animation from UI](http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png)\n\n在这种情况下，UI和渲染线程有一些重负荷的工作，以至于超越了帧的边界。这可能是由于我们每帧试图渲染的UI太多了导致的。在这种情况下，**问题出在需要渲染的原生视图上**。\n\n并且，你还应该能看到一些可以指导接下来优化工作的有用的信息。\n\n## JS的问题\n\n如果你发现问题出在JS上，在你正在执行的JS代码中寻找线索。在上面的图中，我们会发现`RCTEventEmitter`每帧被执行了很多次。这是上面的数据统计放大后的内容：\n\n![Too much JS](http://reactnative.cn/static/docs/0.35/img/SystraceBadJS2.png)\n\n这看起来不是很正常，为什么事件被调用的如此频繁？它们是不同的事件吗？具体的答案取决于你的产品的代码。在许多情况下，你可能需要看看[shouldComponentUpdate](https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate)的介绍。\n\n> **TODO**: 我们还在准备更多的JS性能分析的工具，会在将来的版本中加入。\n\n## 原生UI问题\n\n如果你发现问题出在原生UI上，有两种常见的情况：\n\n1. 你每帧在渲染的UI给GPU带来了太重的负载，或者：\n2. 你在动画、交互的过程中不断创建新的UI对象（譬如在scroll的过程中加载新的内容）\n\n### GPU负担过重\n\n在第一种情况下，你应该能看到UI线程的图表类似这样：\n\n![Overloaded GPU](http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png)\n\n注意`DrawFrame`花费了很多时间，超越了帧的边界。这些时间用来等待GPU获取它的操作缓存。\n\n要缓解这个问题，你应该：\n\n- 检查`renderToHardwareTextureAndroid`的使用，有这个属性的View的子节点正在进行动画或变形会导致性能大幅下降(譬如`Navigator`提供的滑动、淡入淡出动画)。\n- 确保你**没有**使用`needsOffscreenAlphaCompositing`，这个默认是关闭的，因为它在大部分情况下都会带来GPU消耗的大幅提升。\n\n如果这还不能帮你解决问题，你可能需要更深入的探索GPU到底在做什么。参见[Tracer for OpenGL ES](http://developer.android.com/tools/help/gltracer.html)。\n\n### 在UI线程创建大量视图\n\n如果是第二种情况，你可能会看到类似这样的结果：\n\n![Creating Views](http://reactnative.cn/static/docs/0.35/img/SystraceBadCreateUI.png)\n\n注意一开始JS线程工作了很久，然后你看到原生模块线程干了些事情，最后带来了UI线程的巨大开销。\n\n这个问题并没有什么简单直接的优化办法，除非你能把创建UI的步骤推迟到交互结束以后去进行，或者你能直接简化你所要创建的UI。React Native小组正在架构层设法提供一个方案，使得新的UI视图可以在主线程之外去创建和配置，这样就可以使得交互变得更加流畅。\n\n## 还是没搞定？\n\n如果你还是很迷惑或者不知如何进展，你可以在[Stack Overflow的react-native标签下](http://stackoverflow.com/tags/react-native)提交一个问题。如果你在这里得不到响应，或者找到了一个核心组件的问题，你可以[提交一个Github issue](https://github.com/facebook/react-native/issues)。\n","slug":"react-native-android-ui-performance","published":1,"updated":"2016-10-26T07:16:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix5uii630005yuxqnvaso32e","content":"<p>我们尽最大的努力来争取使UI组件的性能如丝般顺滑，但有的时候这根本不可能做到。要知道，Android有超过一万种不同型号的手机，而在框架底层进行软件渲染的时候是统一处理的，这意味着你没办法像iOS那样自由。不过有些时候，你还是可以想办法提升应用的性能（有的时候问题根本不是出在原生代码上！）</p>\n<p>要想解决应用的性能问题，第一步就是搞明白在每个16毫秒的帧中，时间都去哪儿了。为此，我们会使用一个标准的Android性能分析工具<code>systrace</code>，不过在此之前……</p>\n<blockquote>\n<p>请先确定JS的开发者模式已经关闭！</p>\n<p>你应该在应用的日志里看到<code>__DEV__ === false, development-level warning are OFF, performance optimizations are ON</code>等字样（你可以通过adb logcat来查看应用日志）</p>\n</blockquote>\n<h2 id=\"使用Systrace进行性能分析\"><a href=\"#使用Systrace进行性能分析\" class=\"headerlink\" title=\"使用Systrace进行性能分析\"></a>使用Systrace进行性能分析</h2><p>Systrace是一个标准的基于标记的Android性能分析工具（如果你安装了Android platform-tool包，它也会一同安装）。被调试的代码段在开始和结束处加上标记，在执行的过程中标记会被记录，最后会以图表形式展现统计结果。包括Android SDK自己和React Native框架都已经提供了标准的标记供你查看。</p>\n<h3 id=\"收集一次数据\"><a href=\"#收集一次数据\" class=\"headerlink\" title=\"收集一次数据\"></a>收集一次数据</h3><blockquote>\n<p>注意:</p>\n<p>Systrace从React Native <code>v0.15</code>版本开始支持。你需要在此版本下构建项目才能收集相应的性能数据。</p>\n</blockquote>\n<p>首先，把你想分析的、运行不流畅的设备使用USB线链接到电脑上，然后操作应用来到你想分析的导航/动画之前，接着这样运行systrace：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ &lt;AndroidSDK所在目录&gt;/platform-tools/systrace/systrace.py --time=10 -o trace.html sched gfx view -a &lt;你的应用包名&gt;</div></pre></td></tr></table></figure>\n<p>对于此命令做一个简单的说明：</p>\n<ul>\n<li><code>time</code>参数控制本次数据收集的持续时间，单位是秒。</li>\n<li><code>schd</code>, <code>gfx</code>, 和<code>view</code>是我们所关心的Android SDK内置的tag（标记的集合）：<code>schd</code>提供了你的设备的每个CPU核心正在做什么的信息，<code>gfx</code>提供了你的图形相关信息，譬如每帧的时间范围，而<code>view</code>提供了一些关于视图布局和渲染相关性能的信息。</li>\n<li><code>-a &lt;你的应用包名&gt;</code>启用了针对应用的过滤。在这里填写你用React Native创建的应用包名。<code>你的应用包名</code>可以在你应用中的<code>AndroidManifest.xml</code>里找到，形如<code>com.example.app</code></li>\n</ul>\n<p><em>译注</em>：实际上，AndroidManifest.xml里的应用包名会被<code>app/build.gradle</code>里的<code>applicationId</code>取代。如果二者不一致，应当以<code>app/build.gradle</code>里的为准。</p>\n<p>一旦systrace开始收集数据，你可以操作应用执行你所关心的动画和操作。在收集结束后，systrace会给你提供一个链接，你可以在浏览器中打开这个链接来查看数据收集的结果。</p>\n<h2 id=\"查看性能数据\"><a href=\"#查看性能数据\" class=\"headerlink\" title=\"查看性能数据\"></a>查看性能数据</h2><p>在浏览器中打开数据页面（建议使用Chrome），你应该能看到类似这样的结果：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceExample.png\" alt=\"Example\"></p>\n<p><strong>提示</strong>: 你可以使用WSAD键来滚动和缩放性能数据图表。</p>\n<h3 id=\"启用垂直同步高亮\"><a href=\"#启用垂直同步高亮\" class=\"headerlink\" title=\"启用垂直同步高亮\"></a>启用垂直同步高亮</h3><p>接下来你首先应该启用16毫秒帧区间的高亮。在屏幕顶端点击对应的复选框：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceHighlightVSync.png\" alt=\"Enable VSync Highlighting\"></p>\n<p>然后你应该能在屏幕上看到类似上图的斑马状条纹。如果你无法看到这样的条纹，可以尝试换一台设备来进行分析：部分三星手机显示垂直同步高亮存在已知问题，而Nexus系列大部分情况都相当可靠。</p>\n<h3 id=\"找到你的进程\"><a href=\"#找到你的进程\" class=\"headerlink\" title=\"找到你的进程\"></a>找到你的进程</h3><p>滚动图表直到你找到你的应用包名。在上面的例子里，我正在分析<code>com.facebook.adsmanager</code>，由于内核的线程名字长度限制，它会显示成<code>book.adsmanager</code>。</p>\n<p>在左侧，你应该能看到一系列线程对应着右边的时间轴。有3到4个线程是我们必须关注的：UI线程(名字可能是<code>UI Thread</code>或者是你的包名), <code>mqt_js</code>和<code>mqt_native_modules</code>。如果你在Android 5.0以上版本运行，我们还需要关注<code>Render</code>（渲染）线程。</p>\n<h3 id=\"UI-线程\"><a href=\"#UI-线程\" class=\"headerlink\" title=\"UI 线程\"></a>UI 线程</h3><p>标准的Android布局和绘制都在UI线程里发生。右侧显示的线程名字会是你的包名(在我的例子里是book.adsmanager)或者UI Thread.你在这个线程里看到的事件可能会是一些<code>Choreographer</code>, <code>traversals</code>或者<code>DispatchUI</code>：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceUIThreadExample.png\" alt=\"UI Thread Example\"></p>\n<h3 id=\"JS线程\"><a href=\"#JS线程\" class=\"headerlink\" title=\"JS线程\"></a>JS线程</h3><p>这是用于执行JavaScript代码的线程。根据Android系统版本或者设备的不同，线程名可能是<code>mqt_js</code>或者<code>&lt;...&gt;</code>。如果看不到对应的名字的话，寻找类似<code>JSCall</code>，<code>Bridge.executeJSCall</code>这样的事件。</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceJSThreadExample.png\" alt=\"JS Thread Example\"></p>\n<h3 id=\"原生模块线程\"><a href=\"#原生模块线程\" class=\"headerlink\" title=\"原生模块线程\"></a>原生模块线程</h3><p>这里是用于原生模块执行代码(譬如<code>UIManager</code>)的线程，线程名可能是<code>mqt_native_modules</code>或<code>&lt;...&gt;</code>。在后一种情况下，寻找类似<code>NativeCall</code>, <code>CallJavaModuleMethod</code>, 还有<code>onBatchComplete</code>这样的事件名：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceNativeModulesThreadExample.png\" alt=\"Native Modules Thread Example\"></p>\n<h3 id=\"额外的：渲染线程\"><a href=\"#额外的：渲染线程\" class=\"headerlink\" title=\"额外的：渲染线程\"></a>额外的：渲染线程</h3><p>如果你在使用Android L(5.0)或者更高版本，你应该还会在你的应用里看到一个渲染线程。这个线程真正生成OpenGL渲染序列来渲染你的UI。这个线程的名字可能为<code>RenderThread</code>或者<code>&lt;...&gt;</code>，在后一种情况下，寻找类似<code>DrawFrame</code>或<code>queueBuffer</code>这样的事件：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceRenderThreadExample.png\" alt=\"Render Thread Example\"></p>\n<h2 id=\"寻找导致卡顿的罪魁祸首\"><a href=\"#寻找导致卡顿的罪魁祸首\" class=\"headerlink\" title=\"寻找导致卡顿的罪魁祸首\"></a>寻找导致卡顿的罪魁祸首</h2><p>一个流畅的动画应该看起来像这样：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceWellBehaved.png\" alt=\"Smooth Animation\"></p>\n<p>每个背景颜色不同的部分我们称作“一帧”——记住要渲染一个流畅的帧，我们所有的界面工作都需要在16毫秒内完成。注意没有任何一个线程在靠近帧的边界处工作。类似这样的一个应用程序就正在60FPS(帧每秒)的情况下流畅表现。</p>\n<p>如果你发现一些起伏的地方，譬如这样：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadJS.png\" alt=\"Choppy Animation from JS\"></p>\n<p>注意在上图中JS线程基本上一直在执行，并且超越了帧的边界。这个应用就没法以60FPS渲染了。在这种情况下，<strong>问题出在JS中</strong>。</p>\n<p>你还有可能会看到一些类似这样的东西：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png\" alt=\"Choppy Animation from UI\"></p>\n<p>在这种情况下，UI和渲染线程有一些重负荷的工作，以至于超越了帧的边界。这可能是由于我们每帧试图渲染的UI太多了导致的。在这种情况下，<strong>问题出在需要渲染的原生视图上</strong>。</p>\n<p>并且，你还应该能看到一些可以指导接下来优化工作的有用的信息。</p>\n<h2 id=\"JS的问题\"><a href=\"#JS的问题\" class=\"headerlink\" title=\"JS的问题\"></a>JS的问题</h2><p>如果你发现问题出在JS上，在你正在执行的JS代码中寻找线索。在上面的图中，我们会发现<code>RCTEventEmitter</code>每帧被执行了很多次。这是上面的数据统计放大后的内容：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadJS2.png\" alt=\"Too much JS\"></p>\n<p>这看起来不是很正常，为什么事件被调用的如此频繁？它们是不同的事件吗？具体的答案取决于你的产品的代码。在许多情况下，你可能需要看看<a href=\"https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate\" target=\"_blank\" rel=\"external\">shouldComponentUpdate</a>的介绍。</p>\n<blockquote>\n<p><strong>TODO</strong>: 我们还在准备更多的JS性能分析的工具，会在将来的版本中加入。</p>\n</blockquote>\n<h2 id=\"原生UI问题\"><a href=\"#原生UI问题\" class=\"headerlink\" title=\"原生UI问题\"></a>原生UI问题</h2><p>如果你发现问题出在原生UI上，有两种常见的情况：</p>\n<ol>\n<li>你每帧在渲染的UI给GPU带来了太重的负载，或者：</li>\n<li>你在动画、交互的过程中不断创建新的UI对象（譬如在scroll的过程中加载新的内容）</li>\n</ol>\n<h3 id=\"GPU负担过重\"><a href=\"#GPU负担过重\" class=\"headerlink\" title=\"GPU负担过重\"></a>GPU负担过重</h3><p>在第一种情况下，你应该能看到UI线程的图表类似这样：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png\" alt=\"Overloaded GPU\"></p>\n<p>注意<code>DrawFrame</code>花费了很多时间，超越了帧的边界。这些时间用来等待GPU获取它的操作缓存。</p>\n<p>要缓解这个问题，你应该：</p>\n<ul>\n<li>检查<code>renderToHardwareTextureAndroid</code>的使用，有这个属性的View的子节点正在进行动画或变形会导致性能大幅下降(譬如<code>Navigator</code>提供的滑动、淡入淡出动画)。</li>\n<li>确保你<strong>没有</strong>使用<code>needsOffscreenAlphaCompositing</code>，这个默认是关闭的，因为它在大部分情况下都会带来GPU消耗的大幅提升。</li>\n</ul>\n<p>如果这还不能帮你解决问题，你可能需要更深入的探索GPU到底在做什么。参见<a href=\"http://developer.android.com/tools/help/gltracer.html\" target=\"_blank\" rel=\"external\">Tracer for OpenGL ES</a>。</p>\n<h3 id=\"在UI线程创建大量视图\"><a href=\"#在UI线程创建大量视图\" class=\"headerlink\" title=\"在UI线程创建大量视图\"></a>在UI线程创建大量视图</h3><p>如果是第二种情况，你可能会看到类似这样的结果：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadCreateUI.png\" alt=\"Creating Views\"></p>\n<p>注意一开始JS线程工作了很久，然后你看到原生模块线程干了些事情，最后带来了UI线程的巨大开销。</p>\n<p>这个问题并没有什么简单直接的优化办法，除非你能把创建UI的步骤推迟到交互结束以后去进行，或者你能直接简化你所要创建的UI。React Native小组正在架构层设法提供一个方案，使得新的UI视图可以在主线程之外去创建和配置，这样就可以使得交互变得更加流畅。</p>\n<h2 id=\"还是没搞定？\"><a href=\"#还是没搞定？\" class=\"headerlink\" title=\"还是没搞定？\"></a>还是没搞定？</h2><p>如果你还是很迷惑或者不知如何进展，你可以在<a href=\"http://stackoverflow.com/tags/react-native\" target=\"_blank\" rel=\"external\">Stack Overflow的react-native标签下</a>提交一个问题。如果你在这里得不到响应，或者找到了一个核心组件的问题，你可以<a href=\"https://github.com/facebook/react-native/issues\" target=\"_blank\" rel=\"external\">提交一个Github issue</a>。</p>\n","excerpt":"","more":"<p>我们尽最大的努力来争取使UI组件的性能如丝般顺滑，但有的时候这根本不可能做到。要知道，Android有超过一万种不同型号的手机，而在框架底层进行软件渲染的时候是统一处理的，这意味着你没办法像iOS那样自由。不过有些时候，你还是可以想办法提升应用的性能（有的时候问题根本不是出在原生代码上！）</p>\n<p>要想解决应用的性能问题，第一步就是搞明白在每个16毫秒的帧中，时间都去哪儿了。为此，我们会使用一个标准的Android性能分析工具<code>systrace</code>，不过在此之前……</p>\n<blockquote>\n<p>请先确定JS的开发者模式已经关闭！</p>\n<p>你应该在应用的日志里看到<code>__DEV__ === false, development-level warning are OFF, performance optimizations are ON</code>等字样（你可以通过adb logcat来查看应用日志）</p>\n</blockquote>\n<h2 id=\"使用Systrace进行性能分析\"><a href=\"#使用Systrace进行性能分析\" class=\"headerlink\" title=\"使用Systrace进行性能分析\"></a>使用Systrace进行性能分析</h2><p>Systrace是一个标准的基于标记的Android性能分析工具（如果你安装了Android platform-tool包，它也会一同安装）。被调试的代码段在开始和结束处加上标记，在执行的过程中标记会被记录，最后会以图表形式展现统计结果。包括Android SDK自己和React Native框架都已经提供了标准的标记供你查看。</p>\n<h3 id=\"收集一次数据\"><a href=\"#收集一次数据\" class=\"headerlink\" title=\"收集一次数据\"></a>收集一次数据</h3><blockquote>\n<p>注意:</p>\n<p>Systrace从React Native <code>v0.15</code>版本开始支持。你需要在此版本下构建项目才能收集相应的性能数据。</p>\n</blockquote>\n<p>首先，把你想分析的、运行不流畅的设备使用USB线链接到电脑上，然后操作应用来到你想分析的导航/动画之前，接着这样运行systrace：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ &lt;AndroidSDK所在目录&gt;/platform-tools/systrace/systrace.py --time=10 -o trace.html sched gfx view -a &lt;你的应用包名&gt;</div></pre></td></tr></table></figure>\n<p>对于此命令做一个简单的说明：</p>\n<ul>\n<li><code>time</code>参数控制本次数据收集的持续时间，单位是秒。</li>\n<li><code>schd</code>, <code>gfx</code>, 和<code>view</code>是我们所关心的Android SDK内置的tag（标记的集合）：<code>schd</code>提供了你的设备的每个CPU核心正在做什么的信息，<code>gfx</code>提供了你的图形相关信息，譬如每帧的时间范围，而<code>view</code>提供了一些关于视图布局和渲染相关性能的信息。</li>\n<li><code>-a &lt;你的应用包名&gt;</code>启用了针对应用的过滤。在这里填写你用React Native创建的应用包名。<code>你的应用包名</code>可以在你应用中的<code>AndroidManifest.xml</code>里找到，形如<code>com.example.app</code></li>\n</ul>\n<p><em>译注</em>：实际上，AndroidManifest.xml里的应用包名会被<code>app/build.gradle</code>里的<code>applicationId</code>取代。如果二者不一致，应当以<code>app/build.gradle</code>里的为准。</p>\n<p>一旦systrace开始收集数据，你可以操作应用执行你所关心的动画和操作。在收集结束后，systrace会给你提供一个链接，你可以在浏览器中打开这个链接来查看数据收集的结果。</p>\n<h2 id=\"查看性能数据\"><a href=\"#查看性能数据\" class=\"headerlink\" title=\"查看性能数据\"></a>查看性能数据</h2><p>在浏览器中打开数据页面（建议使用Chrome），你应该能看到类似这样的结果：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceExample.png\" alt=\"Example\"></p>\n<p><strong>提示</strong>: 你可以使用WSAD键来滚动和缩放性能数据图表。</p>\n<h3 id=\"启用垂直同步高亮\"><a href=\"#启用垂直同步高亮\" class=\"headerlink\" title=\"启用垂直同步高亮\"></a>启用垂直同步高亮</h3><p>接下来你首先应该启用16毫秒帧区间的高亮。在屏幕顶端点击对应的复选框：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceHighlightVSync.png\" alt=\"Enable VSync Highlighting\"></p>\n<p>然后你应该能在屏幕上看到类似上图的斑马状条纹。如果你无法看到这样的条纹，可以尝试换一台设备来进行分析：部分三星手机显示垂直同步高亮存在已知问题，而Nexus系列大部分情况都相当可靠。</p>\n<h3 id=\"找到你的进程\"><a href=\"#找到你的进程\" class=\"headerlink\" title=\"找到你的进程\"></a>找到你的进程</h3><p>滚动图表直到你找到你的应用包名。在上面的例子里，我正在分析<code>com.facebook.adsmanager</code>，由于内核的线程名字长度限制，它会显示成<code>book.adsmanager</code>。</p>\n<p>在左侧，你应该能看到一系列线程对应着右边的时间轴。有3到4个线程是我们必须关注的：UI线程(名字可能是<code>UI Thread</code>或者是你的包名), <code>mqt_js</code>和<code>mqt_native_modules</code>。如果你在Android 5.0以上版本运行，我们还需要关注<code>Render</code>（渲染）线程。</p>\n<h3 id=\"UI-线程\"><a href=\"#UI-线程\" class=\"headerlink\" title=\"UI 线程\"></a>UI 线程</h3><p>标准的Android布局和绘制都在UI线程里发生。右侧显示的线程名字会是你的包名(在我的例子里是book.adsmanager)或者UI Thread.你在这个线程里看到的事件可能会是一些<code>Choreographer</code>, <code>traversals</code>或者<code>DispatchUI</code>：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceUIThreadExample.png\" alt=\"UI Thread Example\"></p>\n<h3 id=\"JS线程\"><a href=\"#JS线程\" class=\"headerlink\" title=\"JS线程\"></a>JS线程</h3><p>这是用于执行JavaScript代码的线程。根据Android系统版本或者设备的不同，线程名可能是<code>mqt_js</code>或者<code>&lt;...&gt;</code>。如果看不到对应的名字的话，寻找类似<code>JSCall</code>，<code>Bridge.executeJSCall</code>这样的事件。</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceJSThreadExample.png\" alt=\"JS Thread Example\"></p>\n<h3 id=\"原生模块线程\"><a href=\"#原生模块线程\" class=\"headerlink\" title=\"原生模块线程\"></a>原生模块线程</h3><p>这里是用于原生模块执行代码(譬如<code>UIManager</code>)的线程，线程名可能是<code>mqt_native_modules</code>或<code>&lt;...&gt;</code>。在后一种情况下，寻找类似<code>NativeCall</code>, <code>CallJavaModuleMethod</code>, 还有<code>onBatchComplete</code>这样的事件名：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceNativeModulesThreadExample.png\" alt=\"Native Modules Thread Example\"></p>\n<h3 id=\"额外的：渲染线程\"><a href=\"#额外的：渲染线程\" class=\"headerlink\" title=\"额外的：渲染线程\"></a>额外的：渲染线程</h3><p>如果你在使用Android L(5.0)或者更高版本，你应该还会在你的应用里看到一个渲染线程。这个线程真正生成OpenGL渲染序列来渲染你的UI。这个线程的名字可能为<code>RenderThread</code>或者<code>&lt;...&gt;</code>，在后一种情况下，寻找类似<code>DrawFrame</code>或<code>queueBuffer</code>这样的事件：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceRenderThreadExample.png\" alt=\"Render Thread Example\"></p>\n<h2 id=\"寻找导致卡顿的罪魁祸首\"><a href=\"#寻找导致卡顿的罪魁祸首\" class=\"headerlink\" title=\"寻找导致卡顿的罪魁祸首\"></a>寻找导致卡顿的罪魁祸首</h2><p>一个流畅的动画应该看起来像这样：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceWellBehaved.png\" alt=\"Smooth Animation\"></p>\n<p>每个背景颜色不同的部分我们称作“一帧”——记住要渲染一个流畅的帧，我们所有的界面工作都需要在16毫秒内完成。注意没有任何一个线程在靠近帧的边界处工作。类似这样的一个应用程序就正在60FPS(帧每秒)的情况下流畅表现。</p>\n<p>如果你发现一些起伏的地方，譬如这样：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadJS.png\" alt=\"Choppy Animation from JS\"></p>\n<p>注意在上图中JS线程基本上一直在执行，并且超越了帧的边界。这个应用就没法以60FPS渲染了。在这种情况下，<strong>问题出在JS中</strong>。</p>\n<p>你还有可能会看到一些类似这样的东西：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png\" alt=\"Choppy Animation from UI\"></p>\n<p>在这种情况下，UI和渲染线程有一些重负荷的工作，以至于超越了帧的边界。这可能是由于我们每帧试图渲染的UI太多了导致的。在这种情况下，<strong>问题出在需要渲染的原生视图上</strong>。</p>\n<p>并且，你还应该能看到一些可以指导接下来优化工作的有用的信息。</p>\n<h2 id=\"JS的问题\"><a href=\"#JS的问题\" class=\"headerlink\" title=\"JS的问题\"></a>JS的问题</h2><p>如果你发现问题出在JS上，在你正在执行的JS代码中寻找线索。在上面的图中，我们会发现<code>RCTEventEmitter</code>每帧被执行了很多次。这是上面的数据统计放大后的内容：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadJS2.png\" alt=\"Too much JS\"></p>\n<p>这看起来不是很正常，为什么事件被调用的如此频繁？它们是不同的事件吗？具体的答案取决于你的产品的代码。在许多情况下，你可能需要看看<a href=\"https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate\">shouldComponentUpdate</a>的介绍。</p>\n<blockquote>\n<p><strong>TODO</strong>: 我们还在准备更多的JS性能分析的工具，会在将来的版本中加入。</p>\n</blockquote>\n<h2 id=\"原生UI问题\"><a href=\"#原生UI问题\" class=\"headerlink\" title=\"原生UI问题\"></a>原生UI问题</h2><p>如果你发现问题出在原生UI上，有两种常见的情况：</p>\n<ol>\n<li>你每帧在渲染的UI给GPU带来了太重的负载，或者：</li>\n<li>你在动画、交互的过程中不断创建新的UI对象（譬如在scroll的过程中加载新的内容）</li>\n</ol>\n<h3 id=\"GPU负担过重\"><a href=\"#GPU负担过重\" class=\"headerlink\" title=\"GPU负担过重\"></a>GPU负担过重</h3><p>在第一种情况下，你应该能看到UI线程的图表类似这样：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadUI.png\" alt=\"Overloaded GPU\"></p>\n<p>注意<code>DrawFrame</code>花费了很多时间，超越了帧的边界。这些时间用来等待GPU获取它的操作缓存。</p>\n<p>要缓解这个问题，你应该：</p>\n<ul>\n<li>检查<code>renderToHardwareTextureAndroid</code>的使用，有这个属性的View的子节点正在进行动画或变形会导致性能大幅下降(譬如<code>Navigator</code>提供的滑动、淡入淡出动画)。</li>\n<li>确保你<strong>没有</strong>使用<code>needsOffscreenAlphaCompositing</code>，这个默认是关闭的，因为它在大部分情况下都会带来GPU消耗的大幅提升。</li>\n</ul>\n<p>如果这还不能帮你解决问题，你可能需要更深入的探索GPU到底在做什么。参见<a href=\"http://developer.android.com/tools/help/gltracer.html\">Tracer for OpenGL ES</a>。</p>\n<h3 id=\"在UI线程创建大量视图\"><a href=\"#在UI线程创建大量视图\" class=\"headerlink\" title=\"在UI线程创建大量视图\"></a>在UI线程创建大量视图</h3><p>如果是第二种情况，你可能会看到类似这样的结果：</p>\n<p><img src=\"http://reactnative.cn/static/docs/0.35/img/SystraceBadCreateUI.png\" alt=\"Creating Views\"></p>\n<p>注意一开始JS线程工作了很久，然后你看到原生模块线程干了些事情，最后带来了UI线程的巨大开销。</p>\n<p>这个问题并没有什么简单直接的优化办法，除非你能把创建UI的步骤推迟到交互结束以后去进行，或者你能直接简化你所要创建的UI。React Native小组正在架构层设法提供一个方案，使得新的UI视图可以在主线程之外去创建和配置，这样就可以使得交互变得更加流畅。</p>\n<h2 id=\"还是没搞定？\"><a href=\"#还是没搞定？\" class=\"headerlink\" title=\"还是没搞定？\"></a>还是没搞定？</h2><p>如果你还是很迷惑或者不知如何进展，你可以在<a href=\"http://stackoverflow.com/tags/react-native\">Stack Overflow的react-native标签下</a>提交一个问题。如果你在这里得不到响应，或者找到了一个核心组件的问题，你可以<a href=\"https://github.com/facebook/react-native/issues\">提交一个Github issue</a>。</p>\n"},{"title":"react-native性能","date":"2016-10-26T03:02:17.000Z","_content":"使用React Native替代基于WebView的框架来开发App的一个强有力的理由，就是为了使App可以达到每秒60帧（足够流畅），并且能有类似原生App的外观和手感。因此我们也尽可能地优化React Native去实现这一目标，使开发者能集中精力处理App的业务逻辑，而不用费心考虑性能。但是，总还是有一些地方有所欠缺，以及在某些场合React Native还不能够替你决定如何进行优化（用原生代码写也无法避免），因此人工的干预依然是必要的。\n本文的目的是教给你一些基本的知识，来帮你排查性能方面的问题，以及探讨这些问题产生的原因和推荐的解决方法。\n\n## 关于“帧”你所需要知道的\n\n老一辈人常常把电影称为“移动的画”，是因为视频中逼真的动态效果其实是一种幻觉，这种幻觉是由一组静态的图片以一个稳定的速度快速变化所产生的。我们把这组图片中的每一张图片叫做一帧，而每秒钟显示的帧数直接的影响了视频（或者说用户界面）的流畅度和真实感。iOS设备提供了每秒60的帧率，这就留给了开发者和UI系统大约16.67ms来完成生成一张静态图片（帧）所需要的所有工作。如果在这分派的16.67ms之内没有能够完成这些工作，就会引发‘丢帧’的后果，使界面表现的不够流畅。\n\n下面要讲的事情可能更为复杂：请先调出你应用的开发菜单，打开`Show FPS Monitor`. 你会注意到有两个不同的帧率.\n\n### JavaScript 帧率\n\n对大多数React Native应用来说，业务逻辑是运行在JavaScript线程上的。这是React应用所在的线程，也是发生API调用，以及处理触摸事件等操作的线程。更新数据到原生支持的视图是批量进行的，并且在事件循环每进行一次的时候被发送到原生端，这一步通常会在一帧时间结束之前处理完（如果一切顺利的话）。如果JavaScript线程有一帧没有及时响应，就被认为发生了一次丢帧。 例如，你在一个复杂应用的根组件上调用了`this.setState`，从而导致一次开销很大的子组件树的重绘，可想而知，这可能会花费200ms也就是整整12帧的丢失。此时，任何由JavaScript控制的动画都会卡住。只要卡顿超过100ms，用户就会明显的感觉到。\n\n这种情况经常发生在Navigator的切换过程中：当你push一个新的路由时，JavaScript需要绘制新场景所需的所有组件，以发送正确的命令给原生端去创建视图。由于切换是由JavaScript线程所控制，因此经常会占用若干帧的时间，引起一些卡顿。有的时候，组件会在`componentDidMount`函数中做一些额外的事情，这甚至可能会导致页面切换过程中多达一秒的卡顿。\n\n另一个例子是触摸事件的响应：如果你正在JavaScript线程处理一个跨越多个帧的工作，你可能会注意到TouchableOpacity的响应被延迟了。这是因为JavaScript线程太忙了，不能够处理主线程发送过来的原始触摸事件。结果TouchableOpacity就不能及时响应这些事件并命令主线程的页面去调整透明度了。\n\n### 主线程 (也即UI线程) 帧率\n\n很多人会注意到，`NavigatorIOS`的性能要比Navigator好的多。原因就是它的切换动画是完全在主线程上执行的，因此不会被JavaScript线程上的掉帧所影响。（[阅读关于为何你仍然需要使用Navigator](using-navigators.html)）\n\n同样，当JavaScript线程卡住的时候，你仍然可以欢快的上下滚动ScrollView，因为ScrollView运行在主线程之上（尽管滚动事件会被分发到JS线程，但是接收这些事件对于滚动这个动作来说并不必要）。\n\n## 性能问题的常见原因\n\n### console.log语句\n\n在运行打好了离线包的应用时，控制台打印语句可能会极大地拖累JavaScript线程。注意有些第三方调试库也可能包含控制台打印语句，比如[redux-logger](https://github.com/evgenyrodionov/redux-logger)，所以在发布应用前请务必仔细检查，确保全部移除。\n\n\n> 有个[babel插件](https://babeljs.io/docs/plugins/transform-remove-console/)可以帮你移除所有的`console.*`调用。首先需要使用`npm install babel-plugin-transform-remove-console --save`来安装，然后在项目根目录下编辑（或者是新建）一个名为·.babelrc`的文件，在其中加入：\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"transform-remove-console\"]\n    }\n  }\n}\n```\n这样在打包发布时，所有的控制台语句就会被自动移除，而在调试时它们仍然会被正常调用。\n\n### 开发模式 (dev=true) \n\nJavaScript线程的性能在开发模式下是很糟糕的。这是不可避免的，因为有许多工作需要在运行的时候去做，譬如使你获得良好的警告和错误信息，又比如验证属性类型（propTypes）以及产生各种其他的警告。\n\n### 缓慢的导航器(Navigator)切换\n\n如之前说，`Navigator`的动画是由JavaScript线程所控制的。想象一下“从右边推入”这个场景的切换：每一帧中，新的场景从右向左移动，从屏幕右边缘开始（不妨认为是320单位宽的的x轴偏移），最终移动到x轴偏移为0的屏幕位置。切换过程中的每一帧，JavaScript线程都需要发送一个新的x轴偏移量给主线程。如果JavaScript线程卡住了，它就无法处理这项事情，因而这一帧就无法更新，动画就被卡住了。\n\n长远的解决方法，其中一部分是要允许基于JavaScript的动画从主线程分离。同样是上面的例子，我们可以在切换动画开始的时候计算出一个列表，其中包含所有的新的场景需要的x轴偏移量，然后一次发送到主线程以某种优化的方式执行。由于JavaScript线程已经从更新x轴偏移量给主线程这个职责中解脱了出来，因此JavaScript线程中的掉帧就不是什么大问题了 —— 用户将基本上不会意识到这个问题，因为用户的注意力会被流畅的切换动作所吸引。\n\n不幸的是，这个方案还没有被实现。所以当前的解决方案是，在动画的进行过程中，利用InteractionManager来选择性的渲染新场景所需的最小限度的内容。\n\n`InteractionManager.runAfterInteractions`的参数中包含一个回调，这个回调会在navigator切换动画结束的时候被触发（每个来自于`Animated`接口的动画都会通知InteractionManager，不过这个就超出了本文的讨论）。\n\n你的场景组件看上去应该是这样的：\n\n```javascript\nclass ExpensiveScene extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {renderPlaceholderOnly: true};\n  }\n\n  componentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n      this.setState({renderPlaceholderOnly: false});\n    });\n  }\n\n  render() {\n    if (this.state.renderPlaceholderOnly) {\n      return this._renderPlaceholderView();\n    }\n\n    return (\n      <View>\n        <Text>Your full view goes here</Text>\n      </View>\n    );\n  }\n\n\n  _renderPlaceholderView() {\n    return (\n      <View>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n};\n```\n\n你不必被限制在仅仅是做一些loading指示的渲染，你也可以绘制部分的页面内容 —— 例如，当你加载Facebook应用的时候，你会看见一个灰色方形的消息流的占位符，是将来用来显示文字的地方。如果你正在场景中绘制地图，那么最好在场景切换完成之前，显示一个灰色的占位页面或者是一个转动的动画，因为切换过程的确会导致主线程的掉帧。\n\n### ListView初始化渲染太慢以及列表过长时滚动性能太差\n这是一个频繁出现的问题。因为iOS配备了UITableView，通过重用底层的UIViews实现了非常高性能的体验（相比之下ListView的性能没有那么好）。用React Native实现相同效果的工作仍正在进行中，但是在此之前，我们有一些可用的方法来稍加改进性能以满足我们的需求。\n\n#### initialListSize \n\n这个属性定义了在首次渲染中绘制的行数。如果我们关注于快速的显示出页面，可以设置`initialListSize`为1，然后我们会发现其他行在接下来的帧中被快速绘制到屏幕上。而每帧所显示的行数由`pageSize`所决定。\n\n#### pageSize \n\n在初始渲染也就是`initialListSize`被使用之后，ListView将利用`pageSize`来决定每一帧所渲染的行数。默认值为1 —— 但是如果你的页面很小，而且渲染的开销不大的话，你会希望这个值更大一些。稍加调整，你会发现它所起到的作用。\n\n#### scrollRenderAheadDistance \n\n“在将要进入屏幕区域之前的某个位置，开始绘制一行，距离按像素计算。”\n\n如果我们有一个2000个元素的列表，并且立刻全部渲染出来的话，无论是内存还是计算资源都会显得很匮乏。还很可能导致非常可怕的阻塞。因此`scrollRenderAheadDistance`允许我们来指定一个超过视野范围之外所需要渲染的行数。\n\n#### removeClippedSubviews \n\n“当这一选项设置为true的时候，超出屏幕的子视图（同时`overflow`值为`hidden`）会从它们原生的父视图中移除。这个属性可以在列表很长的时候提高滚动的性能。默认为false。（0.14版本后默认为true）”\n\n这是一个应用在长列表上极其重要的优化。Android上，`overflow`值总是`hidden`的，所以你不必担心没有设置它。而在iOS上，你需要确保在行容器上设置了`overflow: hidden`。\n\n### 我的组件渲染太慢，我不需要立即显示全部\n\n这在初次浏览ListView时很常见，适当的使用它是获得稳定性能的关键。就像之前所提到的，它可以提供一些手段在不同帧中来分开渲染页面，稍加改进就可以满足你的需求。此外要记住的是，ListView也可以横向滚动。\n\n### 在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\n\n如果你正在使用一个ListView，你必须提供一个`rowHasChanged`函数，它通过快速的算出某一行是否需要重绘，来减少很多不必要的工作。如果你使用了不可变的数据结构，这项工作就只需检查其引用是否相等。\n\n同样的，你可以实现`shouldComponentUpdate`函数来指明在什么样的确切条件下，你希望这个组件得到重绘。如果你编写的是纯粹的组件（返回值完全由props和state所决定），你可以利用`PureRenderMixin`来为你做这个工作。再强调一次，不可变的数据结构在提速方面非常有用 —— 当你不得不对一个长列表对象做一个深度的比较，它会使重绘你的整个组件更加快速，而且代码量更少。\n\n### 由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\n\n“导航切换极慢”是该问题的常见表现。在其他情形下，这种问题也可能会出现。使用`InteractionManager`是一个好的方法，但是如果在动画中，为了用户体验的开销而延迟其他工作并不太能接受，那么你可以考虑一下使用`LayoutAnimation`。\n\n`Animated`的接口一般会在JavaScript线程中计算出所需要的每一个关键帧，而`LayoutAnimation`则利用了`Core Animation`，使动画不会被JS线程和主线程的掉帧所影响。\n\n举一个需要使用这项功能的例子：比如需要给一个模态框做动画（从下往上划动，并在半透明遮罩中淡入），而这个模态框正在初始化，并且可能响应着几个网络请求，渲染着页面的内容，并且还在更新着打开这个模态框的父页面。了解更多有关如何使用LayoutAnimation的信息，请查看[动画指南](/docs/animations.html)。\n\n注意：  \n  \n - `LayoutAnimation`只工作在“一次性”的动画上（\"静态\"动画） -- 如果动画可能会被中途取消，你还是需要使用`Animated`。\n\n### 在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\n\n当具有透明背景的文本位于一张图片上时，或者在每帧重绘视图时需要用到透明合成的任何其他情况下，这种现象尤为明显。设置`shouldRasterizeIOS`或者`renderToHardwareTextureAndroid`属性可以显著改善这一现象。\n注意不要过度使用该特性，否则你的内存使用量将会飞涨。在使用时，要评估你的性能和内存使用情况。如果你没有需要移动这个视图的需求，请关闭这一属性。\n\n### 使用动画改变图片的尺寸时，UI线程掉帧\n\n在iOS上，每次调整Image组件的宽度或者高度，都需要重新裁剪和缩放原始图片。这个操作开销会非常大，尤其是大的图片。比起直接修改尺寸，更好的方案是使用`transform: [{scale}]`的样式属性来改变尺寸。比如当你点击一个图片，要将它放大到全屏的时候，就可以使用这个属性。\n\n### Touchable系列组件不能很好的响应 \n\n有些时候，如果我们有一项操作与点击事件所带来的透明度改变或者高亮效果发生在同一帧中，那么有可能在`onPress`函数结束之前我们都看不到这些效果。比如在`onPress`执行了一个`setState`的操作，这个操作需要大量计算工作并且导致了掉帧。对此的一个解决方案是将`onPress`处理函数中的操作封装到`requestAnimationFrame`中：\n\n\n```javascript\nhandleOnPress() {\n  // 谨记在使用requestAnimationFrame、setTimeout以及setInterval时\n  // 要使用TimerMixin（其作用是在组件unmount时，清除所有定时器）\n  this.requestAnimationFrame(() => {\n    this.doExpensiveAction();\n  });\n}\n```\n\n## 分析\n\n你可以利用内置的分析器来同时获取JavaScript线程和主线程中代码执行情况的详细信息。\n\n对于iOS来说，Instruments是一个宝贵的工具库，Android的话，你可以使用systrace，参见[调试Android UI性能](http://bdapp.org/2016/10/26/react-native-android-ui-performance/)。\n","source":"_posts/react-native-performance.md","raw":"---\ntitle: react-native性能\ndate: 2016-10-26 11:02:17\ntags: react-native\n---\n使用React Native替代基于WebView的框架来开发App的一个强有力的理由，就是为了使App可以达到每秒60帧（足够流畅），并且能有类似原生App的外观和手感。因此我们也尽可能地优化React Native去实现这一目标，使开发者能集中精力处理App的业务逻辑，而不用费心考虑性能。但是，总还是有一些地方有所欠缺，以及在某些场合React Native还不能够替你决定如何进行优化（用原生代码写也无法避免），因此人工的干预依然是必要的。\n本文的目的是教给你一些基本的知识，来帮你排查性能方面的问题，以及探讨这些问题产生的原因和推荐的解决方法。\n\n## 关于“帧”你所需要知道的\n\n老一辈人常常把电影称为“移动的画”，是因为视频中逼真的动态效果其实是一种幻觉，这种幻觉是由一组静态的图片以一个稳定的速度快速变化所产生的。我们把这组图片中的每一张图片叫做一帧，而每秒钟显示的帧数直接的影响了视频（或者说用户界面）的流畅度和真实感。iOS设备提供了每秒60的帧率，这就留给了开发者和UI系统大约16.67ms来完成生成一张静态图片（帧）所需要的所有工作。如果在这分派的16.67ms之内没有能够完成这些工作，就会引发‘丢帧’的后果，使界面表现的不够流畅。\n\n下面要讲的事情可能更为复杂：请先调出你应用的开发菜单，打开`Show FPS Monitor`. 你会注意到有两个不同的帧率.\n\n### JavaScript 帧率\n\n对大多数React Native应用来说，业务逻辑是运行在JavaScript线程上的。这是React应用所在的线程，也是发生API调用，以及处理触摸事件等操作的线程。更新数据到原生支持的视图是批量进行的，并且在事件循环每进行一次的时候被发送到原生端，这一步通常会在一帧时间结束之前处理完（如果一切顺利的话）。如果JavaScript线程有一帧没有及时响应，就被认为发生了一次丢帧。 例如，你在一个复杂应用的根组件上调用了`this.setState`，从而导致一次开销很大的子组件树的重绘，可想而知，这可能会花费200ms也就是整整12帧的丢失。此时，任何由JavaScript控制的动画都会卡住。只要卡顿超过100ms，用户就会明显的感觉到。\n\n这种情况经常发生在Navigator的切换过程中：当你push一个新的路由时，JavaScript需要绘制新场景所需的所有组件，以发送正确的命令给原生端去创建视图。由于切换是由JavaScript线程所控制，因此经常会占用若干帧的时间，引起一些卡顿。有的时候，组件会在`componentDidMount`函数中做一些额外的事情，这甚至可能会导致页面切换过程中多达一秒的卡顿。\n\n另一个例子是触摸事件的响应：如果你正在JavaScript线程处理一个跨越多个帧的工作，你可能会注意到TouchableOpacity的响应被延迟了。这是因为JavaScript线程太忙了，不能够处理主线程发送过来的原始触摸事件。结果TouchableOpacity就不能及时响应这些事件并命令主线程的页面去调整透明度了。\n\n### 主线程 (也即UI线程) 帧率\n\n很多人会注意到，`NavigatorIOS`的性能要比Navigator好的多。原因就是它的切换动画是完全在主线程上执行的，因此不会被JavaScript线程上的掉帧所影响。（[阅读关于为何你仍然需要使用Navigator](using-navigators.html)）\n\n同样，当JavaScript线程卡住的时候，你仍然可以欢快的上下滚动ScrollView，因为ScrollView运行在主线程之上（尽管滚动事件会被分发到JS线程，但是接收这些事件对于滚动这个动作来说并不必要）。\n\n## 性能问题的常见原因\n\n### console.log语句\n\n在运行打好了离线包的应用时，控制台打印语句可能会极大地拖累JavaScript线程。注意有些第三方调试库也可能包含控制台打印语句，比如[redux-logger](https://github.com/evgenyrodionov/redux-logger)，所以在发布应用前请务必仔细检查，确保全部移除。\n\n\n> 有个[babel插件](https://babeljs.io/docs/plugins/transform-remove-console/)可以帮你移除所有的`console.*`调用。首先需要使用`npm install babel-plugin-transform-remove-console --save`来安装，然后在项目根目录下编辑（或者是新建）一个名为·.babelrc`的文件，在其中加入：\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"transform-remove-console\"]\n    }\n  }\n}\n```\n这样在打包发布时，所有的控制台语句就会被自动移除，而在调试时它们仍然会被正常调用。\n\n### 开发模式 (dev=true) \n\nJavaScript线程的性能在开发模式下是很糟糕的。这是不可避免的，因为有许多工作需要在运行的时候去做，譬如使你获得良好的警告和错误信息，又比如验证属性类型（propTypes）以及产生各种其他的警告。\n\n### 缓慢的导航器(Navigator)切换\n\n如之前说，`Navigator`的动画是由JavaScript线程所控制的。想象一下“从右边推入”这个场景的切换：每一帧中，新的场景从右向左移动，从屏幕右边缘开始（不妨认为是320单位宽的的x轴偏移），最终移动到x轴偏移为0的屏幕位置。切换过程中的每一帧，JavaScript线程都需要发送一个新的x轴偏移量给主线程。如果JavaScript线程卡住了，它就无法处理这项事情，因而这一帧就无法更新，动画就被卡住了。\n\n长远的解决方法，其中一部分是要允许基于JavaScript的动画从主线程分离。同样是上面的例子，我们可以在切换动画开始的时候计算出一个列表，其中包含所有的新的场景需要的x轴偏移量，然后一次发送到主线程以某种优化的方式执行。由于JavaScript线程已经从更新x轴偏移量给主线程这个职责中解脱了出来，因此JavaScript线程中的掉帧就不是什么大问题了 —— 用户将基本上不会意识到这个问题，因为用户的注意力会被流畅的切换动作所吸引。\n\n不幸的是，这个方案还没有被实现。所以当前的解决方案是，在动画的进行过程中，利用InteractionManager来选择性的渲染新场景所需的最小限度的内容。\n\n`InteractionManager.runAfterInteractions`的参数中包含一个回调，这个回调会在navigator切换动画结束的时候被触发（每个来自于`Animated`接口的动画都会通知InteractionManager，不过这个就超出了本文的讨论）。\n\n你的场景组件看上去应该是这样的：\n\n```javascript\nclass ExpensiveScene extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {renderPlaceholderOnly: true};\n  }\n\n  componentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n      this.setState({renderPlaceholderOnly: false});\n    });\n  }\n\n  render() {\n    if (this.state.renderPlaceholderOnly) {\n      return this._renderPlaceholderView();\n    }\n\n    return (\n      <View>\n        <Text>Your full view goes here</Text>\n      </View>\n    );\n  }\n\n\n  _renderPlaceholderView() {\n    return (\n      <View>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n};\n```\n\n你不必被限制在仅仅是做一些loading指示的渲染，你也可以绘制部分的页面内容 —— 例如，当你加载Facebook应用的时候，你会看见一个灰色方形的消息流的占位符，是将来用来显示文字的地方。如果你正在场景中绘制地图，那么最好在场景切换完成之前，显示一个灰色的占位页面或者是一个转动的动画，因为切换过程的确会导致主线程的掉帧。\n\n### ListView初始化渲染太慢以及列表过长时滚动性能太差\n这是一个频繁出现的问题。因为iOS配备了UITableView，通过重用底层的UIViews实现了非常高性能的体验（相比之下ListView的性能没有那么好）。用React Native实现相同效果的工作仍正在进行中，但是在此之前，我们有一些可用的方法来稍加改进性能以满足我们的需求。\n\n#### initialListSize \n\n这个属性定义了在首次渲染中绘制的行数。如果我们关注于快速的显示出页面，可以设置`initialListSize`为1，然后我们会发现其他行在接下来的帧中被快速绘制到屏幕上。而每帧所显示的行数由`pageSize`所决定。\n\n#### pageSize \n\n在初始渲染也就是`initialListSize`被使用之后，ListView将利用`pageSize`来决定每一帧所渲染的行数。默认值为1 —— 但是如果你的页面很小，而且渲染的开销不大的话，你会希望这个值更大一些。稍加调整，你会发现它所起到的作用。\n\n#### scrollRenderAheadDistance \n\n“在将要进入屏幕区域之前的某个位置，开始绘制一行，距离按像素计算。”\n\n如果我们有一个2000个元素的列表，并且立刻全部渲染出来的话，无论是内存还是计算资源都会显得很匮乏。还很可能导致非常可怕的阻塞。因此`scrollRenderAheadDistance`允许我们来指定一个超过视野范围之外所需要渲染的行数。\n\n#### removeClippedSubviews \n\n“当这一选项设置为true的时候，超出屏幕的子视图（同时`overflow`值为`hidden`）会从它们原生的父视图中移除。这个属性可以在列表很长的时候提高滚动的性能。默认为false。（0.14版本后默认为true）”\n\n这是一个应用在长列表上极其重要的优化。Android上，`overflow`值总是`hidden`的，所以你不必担心没有设置它。而在iOS上，你需要确保在行容器上设置了`overflow: hidden`。\n\n### 我的组件渲染太慢，我不需要立即显示全部\n\n这在初次浏览ListView时很常见，适当的使用它是获得稳定性能的关键。就像之前所提到的，它可以提供一些手段在不同帧中来分开渲染页面，稍加改进就可以满足你的需求。此外要记住的是，ListView也可以横向滚动。\n\n### 在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\n\n如果你正在使用一个ListView，你必须提供一个`rowHasChanged`函数，它通过快速的算出某一行是否需要重绘，来减少很多不必要的工作。如果你使用了不可变的数据结构，这项工作就只需检查其引用是否相等。\n\n同样的，你可以实现`shouldComponentUpdate`函数来指明在什么样的确切条件下，你希望这个组件得到重绘。如果你编写的是纯粹的组件（返回值完全由props和state所决定），你可以利用`PureRenderMixin`来为你做这个工作。再强调一次，不可变的数据结构在提速方面非常有用 —— 当你不得不对一个长列表对象做一个深度的比较，它会使重绘你的整个组件更加快速，而且代码量更少。\n\n### 由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\n\n“导航切换极慢”是该问题的常见表现。在其他情形下，这种问题也可能会出现。使用`InteractionManager`是一个好的方法，但是如果在动画中，为了用户体验的开销而延迟其他工作并不太能接受，那么你可以考虑一下使用`LayoutAnimation`。\n\n`Animated`的接口一般会在JavaScript线程中计算出所需要的每一个关键帧，而`LayoutAnimation`则利用了`Core Animation`，使动画不会被JS线程和主线程的掉帧所影响。\n\n举一个需要使用这项功能的例子：比如需要给一个模态框做动画（从下往上划动，并在半透明遮罩中淡入），而这个模态框正在初始化，并且可能响应着几个网络请求，渲染着页面的内容，并且还在更新着打开这个模态框的父页面。了解更多有关如何使用LayoutAnimation的信息，请查看[动画指南](/docs/animations.html)。\n\n注意：  \n  \n - `LayoutAnimation`只工作在“一次性”的动画上（\"静态\"动画） -- 如果动画可能会被中途取消，你还是需要使用`Animated`。\n\n### 在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\n\n当具有透明背景的文本位于一张图片上时，或者在每帧重绘视图时需要用到透明合成的任何其他情况下，这种现象尤为明显。设置`shouldRasterizeIOS`或者`renderToHardwareTextureAndroid`属性可以显著改善这一现象。\n注意不要过度使用该特性，否则你的内存使用量将会飞涨。在使用时，要评估你的性能和内存使用情况。如果你没有需要移动这个视图的需求，请关闭这一属性。\n\n### 使用动画改变图片的尺寸时，UI线程掉帧\n\n在iOS上，每次调整Image组件的宽度或者高度，都需要重新裁剪和缩放原始图片。这个操作开销会非常大，尤其是大的图片。比起直接修改尺寸，更好的方案是使用`transform: [{scale}]`的样式属性来改变尺寸。比如当你点击一个图片，要将它放大到全屏的时候，就可以使用这个属性。\n\n### Touchable系列组件不能很好的响应 \n\n有些时候，如果我们有一项操作与点击事件所带来的透明度改变或者高亮效果发生在同一帧中，那么有可能在`onPress`函数结束之前我们都看不到这些效果。比如在`onPress`执行了一个`setState`的操作，这个操作需要大量计算工作并且导致了掉帧。对此的一个解决方案是将`onPress`处理函数中的操作封装到`requestAnimationFrame`中：\n\n\n```javascript\nhandleOnPress() {\n  // 谨记在使用requestAnimationFrame、setTimeout以及setInterval时\n  // 要使用TimerMixin（其作用是在组件unmount时，清除所有定时器）\n  this.requestAnimationFrame(() => {\n    this.doExpensiveAction();\n  });\n}\n```\n\n## 分析\n\n你可以利用内置的分析器来同时获取JavaScript线程和主线程中代码执行情况的详细信息。\n\n对于iOS来说，Instruments是一个宝贵的工具库，Android的话，你可以使用systrace，参见[调试Android UI性能](http://bdapp.org/2016/10/26/react-native-android-ui-performance/)。\n","slug":"react-native-performance","published":1,"updated":"2016-10-26T06:55:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix5uii690007yuxqwfr1bu9t","content":"<p>使用React Native替代基于WebView的框架来开发App的一个强有力的理由，就是为了使App可以达到每秒60帧（足够流畅），并且能有类似原生App的外观和手感。因此我们也尽可能地优化React Native去实现这一目标，使开发者能集中精力处理App的业务逻辑，而不用费心考虑性能。但是，总还是有一些地方有所欠缺，以及在某些场合React Native还不能够替你决定如何进行优化（用原生代码写也无法避免），因此人工的干预依然是必要的。<br>本文的目的是教给你一些基本的知识，来帮你排查性能方面的问题，以及探讨这些问题产生的原因和推荐的解决方法。</p>\n<h2 id=\"关于“帧”你所需要知道的\"><a href=\"#关于“帧”你所需要知道的\" class=\"headerlink\" title=\"关于“帧”你所需要知道的\"></a>关于“帧”你所需要知道的</h2><p>老一辈人常常把电影称为“移动的画”，是因为视频中逼真的动态效果其实是一种幻觉，这种幻觉是由一组静态的图片以一个稳定的速度快速变化所产生的。我们把这组图片中的每一张图片叫做一帧，而每秒钟显示的帧数直接的影响了视频（或者说用户界面）的流畅度和真实感。iOS设备提供了每秒60的帧率，这就留给了开发者和UI系统大约16.67ms来完成生成一张静态图片（帧）所需要的所有工作。如果在这分派的16.67ms之内没有能够完成这些工作，就会引发‘丢帧’的后果，使界面表现的不够流畅。</p>\n<p>下面要讲的事情可能更为复杂：请先调出你应用的开发菜单，打开<code>Show FPS Monitor</code>. 你会注意到有两个不同的帧率.</p>\n<h3 id=\"JavaScript-帧率\"><a href=\"#JavaScript-帧率\" class=\"headerlink\" title=\"JavaScript 帧率\"></a>JavaScript 帧率</h3><p>对大多数React Native应用来说，业务逻辑是运行在JavaScript线程上的。这是React应用所在的线程，也是发生API调用，以及处理触摸事件等操作的线程。更新数据到原生支持的视图是批量进行的，并且在事件循环每进行一次的时候被发送到原生端，这一步通常会在一帧时间结束之前处理完（如果一切顺利的话）。如果JavaScript线程有一帧没有及时响应，就被认为发生了一次丢帧。 例如，你在一个复杂应用的根组件上调用了<code>this.setState</code>，从而导致一次开销很大的子组件树的重绘，可想而知，这可能会花费200ms也就是整整12帧的丢失。此时，任何由JavaScript控制的动画都会卡住。只要卡顿超过100ms，用户就会明显的感觉到。</p>\n<p>这种情况经常发生在Navigator的切换过程中：当你push一个新的路由时，JavaScript需要绘制新场景所需的所有组件，以发送正确的命令给原生端去创建视图。由于切换是由JavaScript线程所控制，因此经常会占用若干帧的时间，引起一些卡顿。有的时候，组件会在<code>componentDidMount</code>函数中做一些额外的事情，这甚至可能会导致页面切换过程中多达一秒的卡顿。</p>\n<p>另一个例子是触摸事件的响应：如果你正在JavaScript线程处理一个跨越多个帧的工作，你可能会注意到TouchableOpacity的响应被延迟了。这是因为JavaScript线程太忙了，不能够处理主线程发送过来的原始触摸事件。结果TouchableOpacity就不能及时响应这些事件并命令主线程的页面去调整透明度了。</p>\n<h3 id=\"主线程-也即UI线程-帧率\"><a href=\"#主线程-也即UI线程-帧率\" class=\"headerlink\" title=\"主线程 (也即UI线程) 帧率\"></a>主线程 (也即UI线程) 帧率</h3><p>很多人会注意到，<code>NavigatorIOS</code>的性能要比Navigator好的多。原因就是它的切换动画是完全在主线程上执行的，因此不会被JavaScript线程上的掉帧所影响。（<a href=\"using-navigators.html\">阅读关于为何你仍然需要使用Navigator</a>）</p>\n<p>同样，当JavaScript线程卡住的时候，你仍然可以欢快的上下滚动ScrollView，因为ScrollView运行在主线程之上（尽管滚动事件会被分发到JS线程，但是接收这些事件对于滚动这个动作来说并不必要）。</p>\n<h2 id=\"性能问题的常见原因\"><a href=\"#性能问题的常见原因\" class=\"headerlink\" title=\"性能问题的常见原因\"></a>性能问题的常见原因</h2><h3 id=\"console-log语句\"><a href=\"#console-log语句\" class=\"headerlink\" title=\"console.log语句\"></a>console.log语句</h3><p>在运行打好了离线包的应用时，控制台打印语句可能会极大地拖累JavaScript线程。注意有些第三方调试库也可能包含控制台打印语句，比如<a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\" rel=\"external\">redux-logger</a>，所以在发布应用前请务必仔细检查，确保全部移除。</p>\n<blockquote>\n<p>有个<a href=\"https://babeljs.io/docs/plugins/transform-remove-console/\" target=\"_blank\" rel=\"external\">babel插件</a>可以帮你移除所有的<code>console.*</code>调用。首先需要使用<code>npm install babel-plugin-transform-remove-console --save</code>来安装，然后在项目根目录下编辑（或者是新建）一个名为·.babelrc`的文件，在其中加入：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"production\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-remove-console\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这样在打包发布时，所有的控制台语句就会被自动移除，而在调试时它们仍然会被正常调用。</p>\n<h3 id=\"开发模式-dev-true\"><a href=\"#开发模式-dev-true\" class=\"headerlink\" title=\"开发模式 (dev=true)\"></a>开发模式 (dev=true)</h3><p>JavaScript线程的性能在开发模式下是很糟糕的。这是不可避免的，因为有许多工作需要在运行的时候去做，譬如使你获得良好的警告和错误信息，又比如验证属性类型（propTypes）以及产生各种其他的警告。</p>\n<h3 id=\"缓慢的导航器-Navigator-切换\"><a href=\"#缓慢的导航器-Navigator-切换\" class=\"headerlink\" title=\"缓慢的导航器(Navigator)切换\"></a>缓慢的导航器(Navigator)切换</h3><p>如之前说，<code>Navigator</code>的动画是由JavaScript线程所控制的。想象一下“从右边推入”这个场景的切换：每一帧中，新的场景从右向左移动，从屏幕右边缘开始（不妨认为是320单位宽的的x轴偏移），最终移动到x轴偏移为0的屏幕位置。切换过程中的每一帧，JavaScript线程都需要发送一个新的x轴偏移量给主线程。如果JavaScript线程卡住了，它就无法处理这项事情，因而这一帧就无法更新，动画就被卡住了。</p>\n<p>长远的解决方法，其中一部分是要允许基于JavaScript的动画从主线程分离。同样是上面的例子，我们可以在切换动画开始的时候计算出一个列表，其中包含所有的新的场景需要的x轴偏移量，然后一次发送到主线程以某种优化的方式执行。由于JavaScript线程已经从更新x轴偏移量给主线程这个职责中解脱了出来，因此JavaScript线程中的掉帧就不是什么大问题了 —— 用户将基本上不会意识到这个问题，因为用户的注意力会被流畅的切换动作所吸引。</p>\n<p>不幸的是，这个方案还没有被实现。所以当前的解决方案是，在动画的进行过程中，利用InteractionManager来选择性的渲染新场景所需的最小限度的内容。</p>\n<p><code>InteractionManager.runAfterInteractions</code>的参数中包含一个回调，这个回调会在navigator切换动画结束的时候被触发（每个来自于<code>Animated</code>接口的动画都会通知InteractionManager，不过这个就超出了本文的讨论）。</p>\n<p>你的场景组件看上去应该是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpensiveScene</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props, context) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props, context);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;renderPlaceholderOnly: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    InteractionManager.runAfterInteractions(() =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;renderPlaceholderOnly: <span class=\"literal\">false</span>&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.renderPlaceholderOnly) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._renderPlaceholderView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View&gt;</div><div class=\"line\">        &lt;Text&gt;Your full view goes here&lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  _renderPlaceholderView() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View&gt;</div><div class=\"line\">        &lt;Text&gt;Loading...&lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>你不必被限制在仅仅是做一些loading指示的渲染，你也可以绘制部分的页面内容 —— 例如，当你加载Facebook应用的时候，你会看见一个灰色方形的消息流的占位符，是将来用来显示文字的地方。如果你正在场景中绘制地图，那么最好在场景切换完成之前，显示一个灰色的占位页面或者是一个转动的动画，因为切换过程的确会导致主线程的掉帧。</p>\n<h3 id=\"ListView初始化渲染太慢以及列表过长时滚动性能太差\"><a href=\"#ListView初始化渲染太慢以及列表过长时滚动性能太差\" class=\"headerlink\" title=\"ListView初始化渲染太慢以及列表过长时滚动性能太差\"></a>ListView初始化渲染太慢以及列表过长时滚动性能太差</h3><p>这是一个频繁出现的问题。因为iOS配备了UITableView，通过重用底层的UIViews实现了非常高性能的体验（相比之下ListView的性能没有那么好）。用React Native实现相同效果的工作仍正在进行中，但是在此之前，我们有一些可用的方法来稍加改进性能以满足我们的需求。</p>\n<h4 id=\"initialListSize\"><a href=\"#initialListSize\" class=\"headerlink\" title=\"initialListSize\"></a>initialListSize</h4><p>这个属性定义了在首次渲染中绘制的行数。如果我们关注于快速的显示出页面，可以设置<code>initialListSize</code>为1，然后我们会发现其他行在接下来的帧中被快速绘制到屏幕上。而每帧所显示的行数由<code>pageSize</code>所决定。</p>\n<h4 id=\"pageSize\"><a href=\"#pageSize\" class=\"headerlink\" title=\"pageSize\"></a>pageSize</h4><p>在初始渲染也就是<code>initialListSize</code>被使用之后，ListView将利用<code>pageSize</code>来决定每一帧所渲染的行数。默认值为1 —— 但是如果你的页面很小，而且渲染的开销不大的话，你会希望这个值更大一些。稍加调整，你会发现它所起到的作用。</p>\n<h4 id=\"scrollRenderAheadDistance\"><a href=\"#scrollRenderAheadDistance\" class=\"headerlink\" title=\"scrollRenderAheadDistance\"></a>scrollRenderAheadDistance</h4><p>“在将要进入屏幕区域之前的某个位置，开始绘制一行，距离按像素计算。”</p>\n<p>如果我们有一个2000个元素的列表，并且立刻全部渲染出来的话，无论是内存还是计算资源都会显得很匮乏。还很可能导致非常可怕的阻塞。因此<code>scrollRenderAheadDistance</code>允许我们来指定一个超过视野范围之外所需要渲染的行数。</p>\n<h4 id=\"removeClippedSubviews\"><a href=\"#removeClippedSubviews\" class=\"headerlink\" title=\"removeClippedSubviews\"></a>removeClippedSubviews</h4><p>“当这一选项设置为true的时候，超出屏幕的子视图（同时<code>overflow</code>值为<code>hidden</code>）会从它们原生的父视图中移除。这个属性可以在列表很长的时候提高滚动的性能。默认为false。（0.14版本后默认为true）”</p>\n<p>这是一个应用在长列表上极其重要的优化。Android上，<code>overflow</code>值总是<code>hidden</code>的，所以你不必担心没有设置它。而在iOS上，你需要确保在行容器上设置了<code>overflow: hidden</code>。</p>\n<h3 id=\"我的组件渲染太慢，我不需要立即显示全部\"><a href=\"#我的组件渲染太慢，我不需要立即显示全部\" class=\"headerlink\" title=\"我的组件渲染太慢，我不需要立即显示全部\"></a>我的组件渲染太慢，我不需要立即显示全部</h3><p>这在初次浏览ListView时很常见，适当的使用它是获得稳定性能的关键。就像之前所提到的，它可以提供一些手段在不同帧中来分开渲染页面，稍加改进就可以满足你的需求。此外要记住的是，ListView也可以横向滚动。</p>\n<h3 id=\"在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\"><a href=\"#在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\" class=\"headerlink\" title=\"在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\"></a>在重绘一个几乎没有什么变化的页面时，JS帧率严重降低</h3><p>如果你正在使用一个ListView，你必须提供一个<code>rowHasChanged</code>函数，它通过快速的算出某一行是否需要重绘，来减少很多不必要的工作。如果你使用了不可变的数据结构，这项工作就只需检查其引用是否相等。</p>\n<p>同样的，你可以实现<code>shouldComponentUpdate</code>函数来指明在什么样的确切条件下，你希望这个组件得到重绘。如果你编写的是纯粹的组件（返回值完全由props和state所决定），你可以利用<code>PureRenderMixin</code>来为你做这个工作。再强调一次，不可变的数据结构在提速方面非常有用 —— 当你不得不对一个长列表对象做一个深度的比较，它会使重绘你的整个组件更加快速，而且代码量更少。</p>\n<h3 id=\"由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\"><a href=\"#由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\" class=\"headerlink\" title=\"由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\"></a>由于在JavaScript线程中同时做很多事情，导致JS线程掉帧</h3><p>“导航切换极慢”是该问题的常见表现。在其他情形下，这种问题也可能会出现。使用<code>InteractionManager</code>是一个好的方法，但是如果在动画中，为了用户体验的开销而延迟其他工作并不太能接受，那么你可以考虑一下使用<code>LayoutAnimation</code>。</p>\n<p><code>Animated</code>的接口一般会在JavaScript线程中计算出所需要的每一个关键帧，而<code>LayoutAnimation</code>则利用了<code>Core Animation</code>，使动画不会被JS线程和主线程的掉帧所影响。</p>\n<p>举一个需要使用这项功能的例子：比如需要给一个模态框做动画（从下往上划动，并在半透明遮罩中淡入），而这个模态框正在初始化，并且可能响应着几个网络请求，渲染着页面的内容，并且还在更新着打开这个模态框的父页面。了解更多有关如何使用LayoutAnimation的信息，请查看<a href=\"/docs/animations.html\">动画指南</a>。</p>\n<p>注意：  </p>\n<ul>\n<li><code>LayoutAnimation</code>只工作在“一次性”的动画上（”静态”动画） – 如果动画可能会被中途取消，你还是需要使用<code>Animated</code>。</li>\n</ul>\n<h3 id=\"在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\"><a href=\"#在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\" class=\"headerlink\" title=\"在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\"></a>在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧</h3><p>当具有透明背景的文本位于一张图片上时，或者在每帧重绘视图时需要用到透明合成的任何其他情况下，这种现象尤为明显。设置<code>shouldRasterizeIOS</code>或者<code>renderToHardwareTextureAndroid</code>属性可以显著改善这一现象。<br>注意不要过度使用该特性，否则你的内存使用量将会飞涨。在使用时，要评估你的性能和内存使用情况。如果你没有需要移动这个视图的需求，请关闭这一属性。</p>\n<h3 id=\"使用动画改变图片的尺寸时，UI线程掉帧\"><a href=\"#使用动画改变图片的尺寸时，UI线程掉帧\" class=\"headerlink\" title=\"使用动画改变图片的尺寸时，UI线程掉帧\"></a>使用动画改变图片的尺寸时，UI线程掉帧</h3><p>在iOS上，每次调整Image组件的宽度或者高度，都需要重新裁剪和缩放原始图片。这个操作开销会非常大，尤其是大的图片。比起直接修改尺寸，更好的方案是使用<code>transform: [{scale}]</code>的样式属性来改变尺寸。比如当你点击一个图片，要将它放大到全屏的时候，就可以使用这个属性。</p>\n<h3 id=\"Touchable系列组件不能很好的响应\"><a href=\"#Touchable系列组件不能很好的响应\" class=\"headerlink\" title=\"Touchable系列组件不能很好的响应\"></a>Touchable系列组件不能很好的响应</h3><p>有些时候，如果我们有一项操作与点击事件所带来的透明度改变或者高亮效果发生在同一帧中，那么有可能在<code>onPress</code>函数结束之前我们都看不到这些效果。比如在<code>onPress</code>执行了一个<code>setState</code>的操作，这个操作需要大量计算工作并且导致了掉帧。对此的一个解决方案是将<code>onPress</code>处理函数中的操作封装到<code>requestAnimationFrame</code>中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleOnPress() &#123;</div><div class=\"line\">  <span class=\"comment\">// 谨记在使用requestAnimationFrame、setTimeout以及setInterval时</span></div><div class=\"line\">  <span class=\"comment\">// 要使用TimerMixin（其作用是在组件unmount时，清除所有定时器）</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.requestAnimationFrame(() =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doExpensiveAction();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>你可以利用内置的分析器来同时获取JavaScript线程和主线程中代码执行情况的详细信息。</p>\n<p>对于iOS来说，Instruments是一个宝贵的工具库，Android的话，你可以使用systrace，参见<a href=\"http://bdapp.org/2016/10/26/react-native-android-ui-performance/\">调试Android UI性能</a>。</p>\n","excerpt":"","more":"<p>使用React Native替代基于WebView的框架来开发App的一个强有力的理由，就是为了使App可以达到每秒60帧（足够流畅），并且能有类似原生App的外观和手感。因此我们也尽可能地优化React Native去实现这一目标，使开发者能集中精力处理App的业务逻辑，而不用费心考虑性能。但是，总还是有一些地方有所欠缺，以及在某些场合React Native还不能够替你决定如何进行优化（用原生代码写也无法避免），因此人工的干预依然是必要的。<br>本文的目的是教给你一些基本的知识，来帮你排查性能方面的问题，以及探讨这些问题产生的原因和推荐的解决方法。</p>\n<h2 id=\"关于“帧”你所需要知道的\"><a href=\"#关于“帧”你所需要知道的\" class=\"headerlink\" title=\"关于“帧”你所需要知道的\"></a>关于“帧”你所需要知道的</h2><p>老一辈人常常把电影称为“移动的画”，是因为视频中逼真的动态效果其实是一种幻觉，这种幻觉是由一组静态的图片以一个稳定的速度快速变化所产生的。我们把这组图片中的每一张图片叫做一帧，而每秒钟显示的帧数直接的影响了视频（或者说用户界面）的流畅度和真实感。iOS设备提供了每秒60的帧率，这就留给了开发者和UI系统大约16.67ms来完成生成一张静态图片（帧）所需要的所有工作。如果在这分派的16.67ms之内没有能够完成这些工作，就会引发‘丢帧’的后果，使界面表现的不够流畅。</p>\n<p>下面要讲的事情可能更为复杂：请先调出你应用的开发菜单，打开<code>Show FPS Monitor</code>. 你会注意到有两个不同的帧率.</p>\n<h3 id=\"JavaScript-帧率\"><a href=\"#JavaScript-帧率\" class=\"headerlink\" title=\"JavaScript 帧率\"></a>JavaScript 帧率</h3><p>对大多数React Native应用来说，业务逻辑是运行在JavaScript线程上的。这是React应用所在的线程，也是发生API调用，以及处理触摸事件等操作的线程。更新数据到原生支持的视图是批量进行的，并且在事件循环每进行一次的时候被发送到原生端，这一步通常会在一帧时间结束之前处理完（如果一切顺利的话）。如果JavaScript线程有一帧没有及时响应，就被认为发生了一次丢帧。 例如，你在一个复杂应用的根组件上调用了<code>this.setState</code>，从而导致一次开销很大的子组件树的重绘，可想而知，这可能会花费200ms也就是整整12帧的丢失。此时，任何由JavaScript控制的动画都会卡住。只要卡顿超过100ms，用户就会明显的感觉到。</p>\n<p>这种情况经常发生在Navigator的切换过程中：当你push一个新的路由时，JavaScript需要绘制新场景所需的所有组件，以发送正确的命令给原生端去创建视图。由于切换是由JavaScript线程所控制，因此经常会占用若干帧的时间，引起一些卡顿。有的时候，组件会在<code>componentDidMount</code>函数中做一些额外的事情，这甚至可能会导致页面切换过程中多达一秒的卡顿。</p>\n<p>另一个例子是触摸事件的响应：如果你正在JavaScript线程处理一个跨越多个帧的工作，你可能会注意到TouchableOpacity的响应被延迟了。这是因为JavaScript线程太忙了，不能够处理主线程发送过来的原始触摸事件。结果TouchableOpacity就不能及时响应这些事件并命令主线程的页面去调整透明度了。</p>\n<h3 id=\"主线程-也即UI线程-帧率\"><a href=\"#主线程-也即UI线程-帧率\" class=\"headerlink\" title=\"主线程 (也即UI线程) 帧率\"></a>主线程 (也即UI线程) 帧率</h3><p>很多人会注意到，<code>NavigatorIOS</code>的性能要比Navigator好的多。原因就是它的切换动画是完全在主线程上执行的，因此不会被JavaScript线程上的掉帧所影响。（<a href=\"using-navigators.html\">阅读关于为何你仍然需要使用Navigator</a>）</p>\n<p>同样，当JavaScript线程卡住的时候，你仍然可以欢快的上下滚动ScrollView，因为ScrollView运行在主线程之上（尽管滚动事件会被分发到JS线程，但是接收这些事件对于滚动这个动作来说并不必要）。</p>\n<h2 id=\"性能问题的常见原因\"><a href=\"#性能问题的常见原因\" class=\"headerlink\" title=\"性能问题的常见原因\"></a>性能问题的常见原因</h2><h3 id=\"console-log语句\"><a href=\"#console-log语句\" class=\"headerlink\" title=\"console.log语句\"></a>console.log语句</h3><p>在运行打好了离线包的应用时，控制台打印语句可能会极大地拖累JavaScript线程。注意有些第三方调试库也可能包含控制台打印语句，比如<a href=\"https://github.com/evgenyrodionov/redux-logger\">redux-logger</a>，所以在发布应用前请务必仔细检查，确保全部移除。</p>\n<blockquote>\n<p>有个<a href=\"https://babeljs.io/docs/plugins/transform-remove-console/\">babel插件</a>可以帮你移除所有的<code>console.*</code>调用。首先需要使用<code>npm install babel-plugin-transform-remove-console --save</code>来安装，然后在项目根目录下编辑（或者是新建）一个名为·.babelrc`的文件，在其中加入：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"production\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"plugins\"</span>: [<span class=\"string\">\"transform-remove-console\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这样在打包发布时，所有的控制台语句就会被自动移除，而在调试时它们仍然会被正常调用。</p>\n<h3 id=\"开发模式-dev-true\"><a href=\"#开发模式-dev-true\" class=\"headerlink\" title=\"开发模式 (dev=true)\"></a>开发模式 (dev=true)</h3><p>JavaScript线程的性能在开发模式下是很糟糕的。这是不可避免的，因为有许多工作需要在运行的时候去做，譬如使你获得良好的警告和错误信息，又比如验证属性类型（propTypes）以及产生各种其他的警告。</p>\n<h3 id=\"缓慢的导航器-Navigator-切换\"><a href=\"#缓慢的导航器-Navigator-切换\" class=\"headerlink\" title=\"缓慢的导航器(Navigator)切换\"></a>缓慢的导航器(Navigator)切换</h3><p>如之前说，<code>Navigator</code>的动画是由JavaScript线程所控制的。想象一下“从右边推入”这个场景的切换：每一帧中，新的场景从右向左移动，从屏幕右边缘开始（不妨认为是320单位宽的的x轴偏移），最终移动到x轴偏移为0的屏幕位置。切换过程中的每一帧，JavaScript线程都需要发送一个新的x轴偏移量给主线程。如果JavaScript线程卡住了，它就无法处理这项事情，因而这一帧就无法更新，动画就被卡住了。</p>\n<p>长远的解决方法，其中一部分是要允许基于JavaScript的动画从主线程分离。同样是上面的例子，我们可以在切换动画开始的时候计算出一个列表，其中包含所有的新的场景需要的x轴偏移量，然后一次发送到主线程以某种优化的方式执行。由于JavaScript线程已经从更新x轴偏移量给主线程这个职责中解脱了出来，因此JavaScript线程中的掉帧就不是什么大问题了 —— 用户将基本上不会意识到这个问题，因为用户的注意力会被流畅的切换动作所吸引。</p>\n<p>不幸的是，这个方案还没有被实现。所以当前的解决方案是，在动画的进行过程中，利用InteractionManager来选择性的渲染新场景所需的最小限度的内容。</p>\n<p><code>InteractionManager.runAfterInteractions</code>的参数中包含一个回调，这个回调会在navigator切换动画结束的时候被触发（每个来自于<code>Animated</code>接口的动画都会通知InteractionManager，不过这个就超出了本文的讨论）。</p>\n<p>你的场景组件看上去应该是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpensiveScene</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props, context) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props, context);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;renderPlaceholderOnly: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    InteractionManager.runAfterInteractions(() =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;renderPlaceholderOnly: <span class=\"literal\">false</span>&#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.renderPlaceholderOnly) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._renderPlaceholderView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View&gt;</div><div class=\"line\">        &lt;Text&gt;Your full view goes here&lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  _renderPlaceholderView() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;View&gt;</div><div class=\"line\">        &lt;Text&gt;Loading...&lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>你不必被限制在仅仅是做一些loading指示的渲染，你也可以绘制部分的页面内容 —— 例如，当你加载Facebook应用的时候，你会看见一个灰色方形的消息流的占位符，是将来用来显示文字的地方。如果你正在场景中绘制地图，那么最好在场景切换完成之前，显示一个灰色的占位页面或者是一个转动的动画，因为切换过程的确会导致主线程的掉帧。</p>\n<h3 id=\"ListView初始化渲染太慢以及列表过长时滚动性能太差\"><a href=\"#ListView初始化渲染太慢以及列表过长时滚动性能太差\" class=\"headerlink\" title=\"ListView初始化渲染太慢以及列表过长时滚动性能太差\"></a>ListView初始化渲染太慢以及列表过长时滚动性能太差</h3><p>这是一个频繁出现的问题。因为iOS配备了UITableView，通过重用底层的UIViews实现了非常高性能的体验（相比之下ListView的性能没有那么好）。用React Native实现相同效果的工作仍正在进行中，但是在此之前，我们有一些可用的方法来稍加改进性能以满足我们的需求。</p>\n<h4 id=\"initialListSize\"><a href=\"#initialListSize\" class=\"headerlink\" title=\"initialListSize\"></a>initialListSize</h4><p>这个属性定义了在首次渲染中绘制的行数。如果我们关注于快速的显示出页面，可以设置<code>initialListSize</code>为1，然后我们会发现其他行在接下来的帧中被快速绘制到屏幕上。而每帧所显示的行数由<code>pageSize</code>所决定。</p>\n<h4 id=\"pageSize\"><a href=\"#pageSize\" class=\"headerlink\" title=\"pageSize\"></a>pageSize</h4><p>在初始渲染也就是<code>initialListSize</code>被使用之后，ListView将利用<code>pageSize</code>来决定每一帧所渲染的行数。默认值为1 —— 但是如果你的页面很小，而且渲染的开销不大的话，你会希望这个值更大一些。稍加调整，你会发现它所起到的作用。</p>\n<h4 id=\"scrollRenderAheadDistance\"><a href=\"#scrollRenderAheadDistance\" class=\"headerlink\" title=\"scrollRenderAheadDistance\"></a>scrollRenderAheadDistance</h4><p>“在将要进入屏幕区域之前的某个位置，开始绘制一行，距离按像素计算。”</p>\n<p>如果我们有一个2000个元素的列表，并且立刻全部渲染出来的话，无论是内存还是计算资源都会显得很匮乏。还很可能导致非常可怕的阻塞。因此<code>scrollRenderAheadDistance</code>允许我们来指定一个超过视野范围之外所需要渲染的行数。</p>\n<h4 id=\"removeClippedSubviews\"><a href=\"#removeClippedSubviews\" class=\"headerlink\" title=\"removeClippedSubviews\"></a>removeClippedSubviews</h4><p>“当这一选项设置为true的时候，超出屏幕的子视图（同时<code>overflow</code>值为<code>hidden</code>）会从它们原生的父视图中移除。这个属性可以在列表很长的时候提高滚动的性能。默认为false。（0.14版本后默认为true）”</p>\n<p>这是一个应用在长列表上极其重要的优化。Android上，<code>overflow</code>值总是<code>hidden</code>的，所以你不必担心没有设置它。而在iOS上，你需要确保在行容器上设置了<code>overflow: hidden</code>。</p>\n<h3 id=\"我的组件渲染太慢，我不需要立即显示全部\"><a href=\"#我的组件渲染太慢，我不需要立即显示全部\" class=\"headerlink\" title=\"我的组件渲染太慢，我不需要立即显示全部\"></a>我的组件渲染太慢，我不需要立即显示全部</h3><p>这在初次浏览ListView时很常见，适当的使用它是获得稳定性能的关键。就像之前所提到的，它可以提供一些手段在不同帧中来分开渲染页面，稍加改进就可以满足你的需求。此外要记住的是，ListView也可以横向滚动。</p>\n<h3 id=\"在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\"><a href=\"#在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\" class=\"headerlink\" title=\"在重绘一个几乎没有什么变化的页面时，JS帧率严重降低\"></a>在重绘一个几乎没有什么变化的页面时，JS帧率严重降低</h3><p>如果你正在使用一个ListView，你必须提供一个<code>rowHasChanged</code>函数，它通过快速的算出某一行是否需要重绘，来减少很多不必要的工作。如果你使用了不可变的数据结构，这项工作就只需检查其引用是否相等。</p>\n<p>同样的，你可以实现<code>shouldComponentUpdate</code>函数来指明在什么样的确切条件下，你希望这个组件得到重绘。如果你编写的是纯粹的组件（返回值完全由props和state所决定），你可以利用<code>PureRenderMixin</code>来为你做这个工作。再强调一次，不可变的数据结构在提速方面非常有用 —— 当你不得不对一个长列表对象做一个深度的比较，它会使重绘你的整个组件更加快速，而且代码量更少。</p>\n<h3 id=\"由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\"><a href=\"#由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\" class=\"headerlink\" title=\"由于在JavaScript线程中同时做很多事情，导致JS线程掉帧\"></a>由于在JavaScript线程中同时做很多事情，导致JS线程掉帧</h3><p>“导航切换极慢”是该问题的常见表现。在其他情形下，这种问题也可能会出现。使用<code>InteractionManager</code>是一个好的方法，但是如果在动画中，为了用户体验的开销而延迟其他工作并不太能接受，那么你可以考虑一下使用<code>LayoutAnimation</code>。</p>\n<p><code>Animated</code>的接口一般会在JavaScript线程中计算出所需要的每一个关键帧，而<code>LayoutAnimation</code>则利用了<code>Core Animation</code>，使动画不会被JS线程和主线程的掉帧所影响。</p>\n<p>举一个需要使用这项功能的例子：比如需要给一个模态框做动画（从下往上划动，并在半透明遮罩中淡入），而这个模态框正在初始化，并且可能响应着几个网络请求，渲染着页面的内容，并且还在更新着打开这个模态框的父页面。了解更多有关如何使用LayoutAnimation的信息，请查看<a href=\"/docs/animations.html\">动画指南</a>。</p>\n<p>注意：  </p>\n<ul>\n<li><code>LayoutAnimation</code>只工作在“一次性”的动画上（”静态”动画） – 如果动画可能会被中途取消，你还是需要使用<code>Animated</code>。</li>\n</ul>\n<h3 id=\"在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\"><a href=\"#在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\" class=\"headerlink\" title=\"在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧\"></a>在屏幕上移动视图（滚动，切换，旋转）时，UI线程掉帧</h3><p>当具有透明背景的文本位于一张图片上时，或者在每帧重绘视图时需要用到透明合成的任何其他情况下，这种现象尤为明显。设置<code>shouldRasterizeIOS</code>或者<code>renderToHardwareTextureAndroid</code>属性可以显著改善这一现象。<br>注意不要过度使用该特性，否则你的内存使用量将会飞涨。在使用时，要评估你的性能和内存使用情况。如果你没有需要移动这个视图的需求，请关闭这一属性。</p>\n<h3 id=\"使用动画改变图片的尺寸时，UI线程掉帧\"><a href=\"#使用动画改变图片的尺寸时，UI线程掉帧\" class=\"headerlink\" title=\"使用动画改变图片的尺寸时，UI线程掉帧\"></a>使用动画改变图片的尺寸时，UI线程掉帧</h3><p>在iOS上，每次调整Image组件的宽度或者高度，都需要重新裁剪和缩放原始图片。这个操作开销会非常大，尤其是大的图片。比起直接修改尺寸，更好的方案是使用<code>transform: [{scale}]</code>的样式属性来改变尺寸。比如当你点击一个图片，要将它放大到全屏的时候，就可以使用这个属性。</p>\n<h3 id=\"Touchable系列组件不能很好的响应\"><a href=\"#Touchable系列组件不能很好的响应\" class=\"headerlink\" title=\"Touchable系列组件不能很好的响应\"></a>Touchable系列组件不能很好的响应</h3><p>有些时候，如果我们有一项操作与点击事件所带来的透明度改变或者高亮效果发生在同一帧中，那么有可能在<code>onPress</code>函数结束之前我们都看不到这些效果。比如在<code>onPress</code>执行了一个<code>setState</code>的操作，这个操作需要大量计算工作并且导致了掉帧。对此的一个解决方案是将<code>onPress</code>处理函数中的操作封装到<code>requestAnimationFrame</code>中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleOnPress() &#123;</div><div class=\"line\">  <span class=\"comment\">// 谨记在使用requestAnimationFrame、setTimeout以及setInterval时</span></div><div class=\"line\">  <span class=\"comment\">// 要使用TimerMixin（其作用是在组件unmount时，清除所有定时器）</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.requestAnimationFrame(() =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.doExpensiveAction();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>你可以利用内置的分析器来同时获取JavaScript线程和主线程中代码执行情况的详细信息。</p>\n<p>对于iOS来说，Instruments是一个宝贵的工具库，Android的话，你可以使用systrace，参见<a href=\"http://bdapp.org/2016/10/26/react-native-android-ui-performance/\">调试Android UI性能</a>。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cix5uii690007yuxqwfr1bu9t","tag_id":"cix5uii5x0004yuxq2lej6slb","_id":"cix5uii6f000byuxq7xhxe8sp"},{"post_id":"cix5uii5k0000yuxqwblasr47","tag_id":"cix5uii5x0004yuxq2lej6slb","_id":"cix5uii6g000cyuxqs6odon3l"},{"post_id":"cix5uii5s0002yuxqv8czyyan","tag_id":"cix5uii5x0004yuxq2lej6slb","_id":"cix5uii6h000eyuxqe0rlxu0a"},{"post_id":"cix5uii630005yuxqnvaso32e","tag_id":"cix5uii5x0004yuxq2lej6slb","_id":"cix5uii6i000fyuxqyte4j9mz"}],"Tag":[{"name":"react-native","_id":"cix5uii5x0004yuxq2lej6slb"}]}}